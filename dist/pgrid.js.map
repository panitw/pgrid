{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/grid/event.js","webpack:///./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js","webpack:///./src/grid/view.js","webpack:///./src/grid/model.js","webpack:///./src/data/table.js","webpack:///./src/grid/extension.js","webpack:///./src/grid/state.js","webpack:///./src/grid/utils.js","webpack:///./src/extensions/selection.js","webpack:///./src/extensions/editor.js","webpack:///./src/extensions/copypaste.js","webpack:///./src/extensions/view-updater.js","webpack:///./src/extensions/formatter.js","webpack:///./src/main.js","webpack:///./src/grid/grid.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EventDispatcher","[object Object]","this","_handlers","eventName","handler","push","index","indexOf","splice","length","eventArg","hasListener","listeners","MapShim","Map","getIndex","arr","result","some","entry","anonymous","__entries__","prototypeAccessors","size","configurable","set","delete","entries","has","clear","forEach","callback","ctx","list","defineProperties","isBrowser","window","document","global$1","global","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","setTimeout","Date","now","trailingTimeout","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","ref","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","len","arguments","reduce","position","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","getPaddings","horizPad","left","right","vertPad","top","bottom","width","height","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","this$1","observation","map","WeakMap","ResizeObserver","method","apply","ResizeObserver_es","view_View","model","extensions","super","_model","_extensions","_recycledCells","_cellReference","_template","element","_element","className","innerHTML","style","overflow","tabIndex","_contentPane","querySelector","_topLeftPane","_topLeftInner","_topPane","_topInner","_leftPane","_leftInner","_centerPane","_centerInner","_bottomPane","_bottomInner","_bottomLeftPane","_bottomLeftInner","_scrollWidth","_measureScrollbarWidth","_hScroll","_vScroll","_hScrollThumb","_vScrollThumb","_observeSize","_resturecture","_attachHandlers","executeExtension","grid","calcTotalSize","adjustScrollBar","scrollLeft","undefined","maxScrollY","scrollTop","rowIndex","colIndex","alignTop","cell","getCell","origScrollTop","parentElement","origScrollLeft","scrollIntoViewIfNeeded","setScrollY","setScrollX","createNewCell","leftFreezeSize","getLeftFreezeSize","topFreezeSize","getTopFreezeSize","bottomFreezeSize","getBottomFreezeSize","cellRect","_getCellRect","scrollX","getScrollX","scrollY","getScrollY","gridRect","getBoundingClientRect","_renderCells","cellContent","firstChild","data","getDataAt","arg","handledByExt","rowId","getRowId","field","getColumnField","hasExtension","handled","_vScrollHandler","e","dispatch","_hScrollHandler","_wheelHandler","currentX","currentY","deltaX","deltaY","_keyDownHandler","_updateScrollBar","_resizeObserver","totalWidth","getTotalWidth","totalHeight","getTotalHeight","determineScrollbarState","display","topRunner","leftRunner","cellWidth","cellHeight","getRowHeight","getColumnWidth","topFreeze","getTopFreezeRows","leftFreeze","getLeftFreezeRows","bottomFreeze","getBottomFreezeRows","rowCount","getRowCount","columnCount","getColumnCount","colWidth","paneScrollLeft","paneScrollTop","paneWidth","paneHeight","paneScrollLeft2","paneScrollTop2","paneWidth2","paneHeight2","offsetWidth","offsetHeight","j","rowHeight","_renderCell","cellX","cellY","pop","createElement","appendChild","dataset","title","removeChild","pane","_isCellVisible","_recycleCell","_createCell","cellClasses","getCellClasses","join","inner","outmost","outer","visibility","body","w1","w2","_detectIE","ua","navigator","userAgent","msie","parseInt","substring","rv","edge","model_Model","config","extension","_config","_data","_extension","_columnModel","_rowModel","_headerRowModel","_cellModel","_headerCellModel","headerRows","columns","rows","cells","headerCells","rowModel","getRowModel","colModel","getColumnModel","cellModel","getCellModel","editable","dataRow","getRowData","canEdit","headerRowCount","columnWidth","isHeaderRow","dataRowIndex","freezePane","topFreezeRow","sum","_bottomFreezeSize","_totalWidth","_totalHeight","propName","columnModel","output","cssClass","unshift","isHeader","viewWidth","viewHeight","scrollbarSize","needH","needV","getRowDataAt","setDataAt","getRowIndex","_calcTotalWidth","_calcTotalHeight","_calcBottomFreezeSize","headerRowModelCount","rowModelCount","CHANGE_EVENT_NAME","table_DataTable","dataModel","_idRunner","_rid","_rowMap","_blockEvent","_processedEvent","_transformedRid","_searchQuery","_searchFields","_freezeCount","format","fields","_dataFormat","_fields","Array","isArray","addRow","row","beforeUpdateArg","changeType","prevData","cancel","blocked","updates","setData","rowData","count","insertRow","rid","inserted","_generateRowId","newObj","_createObject","search","slice","tIndex","removeRow","query","fieldMap","acc","val","regex","RegExp","test","arrayValues","Extension","_grid","_extensionTable","cellRender","cellAfterRender","cellUpdate","cellAfterUpdate","cellEditableCheck","cellAfterRecycled","keyDown","gridAfterRender","dataBeforeRender","dataBeforeUpdate","dataAfterUpdate","dataFinishUpdate","ext","extPoint","Error","queryExtension","State","_state","Utils","source","prop","SelectionExtension","_currentSelection","_selectionClass","selection","_mouseDownEventHandler","state","keyCode","view","_selectCell","scrollToCell","preventDefault","stopPropagation","classList","add","actualCell","contains","actualRow","actualCol","remove","getElement","focus","w","h","EditorExtension","_editorAttached","_scrollHandler","listen","_cellDblClickedHandler","_detachEditor","ctrlKey","_clearCell","_editCell","_editingRow","_editingCol","customEditor","getCascadedCellProp","done","_done","cellBound","scrollingElement","_editorContainer","attach","_attachEditor","_inputElement","type","select","_arrowKeyLocked","_keydownHandler","_blurHandler","activeElement","tagName","parentNode","_clickHandler","multiFields","goNext","updateCell","selectionExtension","getExtension","selectCell","CopyPasteExtension","_globalClipboard","_srcSelection","_copy","clipboardData","_paste","getData","pasteEvent","copyEvent","cols","replace","split","pasteRow","pasteCol","srcRowId","srcField","srcSelection","destRowId","destField","destSelection","ViewUpdaterExtension","rowIndexCache","colIndexCache","getColumnIndex","FormatterExtension","formatter","render","newEvent","assign","update","PGrid","mixin","footerRowCount","_view","loadExtension","editing","copypaste","autoUpdate","columnFormatter","centerIfNeeded","makeRange","start","end","coverRange","max","min","makePoint","translate","dX","dY","absolute","elem","pt","offsetLeft","offsetTop","offsetParent","origin","extent","HTMLElement","clientLeft","clientTop"],"mappings":"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","file":"pgrid.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export class EventDispatcher {\r\n\r\n\tconstructor() {\r\n\t\tthis._handlers = {};\r\n\t}\r\n\r\n\tlisten(eventName, handler) {\r\n\t\tif (!this._handlers[eventName]) {\r\n\t\t\tthis._handlers[eventName] = [];\r\n\t\t}\r\n\t\tthis._handlers[eventName].push(handler);\r\n\t}\r\n\r\n\tunlisten(eventName, handler) {\r\n\t\tif (this._handlers[eventName]) {\r\n\t\t\tlet index = this._handlers[eventName].indexOf(handler);\r\n\t\t\tif (index > -1) {\r\n\t\t\t\tthis._handlers[eventName].splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thasListener(eventName) {\r\n\t\treturn this._handlers[eventName] && this._handlers[eventName].length > 0;\r\n\t}\r\n\r\n\tdispatch(eventName, eventArg) {\r\n\t\tif (this.hasListener(eventName)) {\r\n\t\t\tlet listeners = this._handlers[eventName];\r\n\t\t\tfor (let i=0; i<listeners.length; i++) {\r\n\t\t\t\tlisteners[i](eventArg);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = (function () {\n    if (typeof Map !== 'undefined') {\n        return Map;\n    }\n\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\n    function getIndex(arr, key) {\n        var result = -1;\n\n        arr.some(function (entry, index) {\n            if (entry[0] === key) {\n                result = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        return result;\n    }\n\n    return (function () {\n        function anonymous() {\n            this.__entries__ = [];\n        }\n\n        var prototypeAccessors = { size: { configurable: true } };\n\n        /**\r\n         * @returns {boolean}\r\n         */\n        prototypeAccessors.size.get = function () {\n            return this.__entries__.length;\n        };\n\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\n        anonymous.prototype.get = function (key) {\n            var index = getIndex(this.__entries__, key);\n            var entry = this.__entries__[index];\n\n            return entry && entry[1];\n        };\n\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.set = function (key, value) {\n            var index = getIndex(this.__entries__, key);\n\n            if (~index) {\n                this.__entries__[index][1] = value;\n            } else {\n                this.__entries__.push([key, value]);\n            }\n        };\n\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.delete = function (key) {\n            var entries = this.__entries__;\n            var index = getIndex(entries, key);\n\n            if (~index) {\n                entries.splice(index, 1);\n            }\n        };\n\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.has = function (key) {\n            return !!~getIndex(this.__entries__, key);\n        };\n\n        /**\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.clear = function () {\n            this.__entries__.splice(0);\n        };\n\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.forEach = function (callback, ctx) {\n            var this$1 = this;\n            if ( ctx === void 0 ) ctx = null;\n\n            for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {\n                var entry = list[i];\n\n                callback.call(ctx, entry[1], entry[0]);\n            }\n        };\n\n        Object.defineProperties( anonymous.prototype, prototypeAccessors );\n\n        return anonymous;\n    }());\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\nvar global$1 = (function () {\n    if (typeof global !== 'undefined' && global.Math === Math) {\n        return global;\n    }\n\n    if (typeof self !== 'undefined' && self.Math === Math) {\n        return self;\n    }\n\n    if (typeof window !== 'undefined' && window.Math === Math) {\n        return window;\n    }\n\n    // eslint-disable-next-line no-new-func\n    return Function('return this')();\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\nvar requestAnimationFrame$1 = (function () {\n    if (typeof requestAnimationFrame === 'function') {\n        // It's required to use a bounded function because IE sometimes throws\n        // an \"Invalid calling object\" error if rAF is invoked without the global\n        // object on the left hand side.\n        return requestAnimationFrame.bind(global$1);\n    }\n\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\n})();\n\n// Defines minimum timeout before adding a trailing call.\nvar trailingTimeout = 2;\n\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\nvar throttle = function (callback, delay) {\n    var leadingCall = false,\n        trailingCall = false,\n        lastCallTime = 0;\n\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\n    function resolvePending() {\n        if (leadingCall) {\n            leadingCall = false;\n\n            callback();\n        }\n\n        if (trailingCall) {\n            proxy();\n        }\n    }\n\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\n    function timeoutCallback() {\n        requestAnimationFrame$1(resolvePending);\n    }\n\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\n    function proxy() {\n        var timeStamp = Date.now();\n\n        if (leadingCall) {\n            // Reject immediately following calls.\n            if (timeStamp - lastCallTime < trailingTimeout) {\n                return;\n            }\n\n            // Schedule new call to be in invoked when the pending one is resolved.\n            // This is important for \"transitions\" which never actually start\n            // immediately so there is a chance that we might miss one if change\n            // happens amids the pending invocation.\n            trailingCall = true;\n        } else {\n            leadingCall = true;\n            trailingCall = false;\n\n            setTimeout(timeoutCallback, delay);\n        }\n\n        lastCallTime = timeStamp;\n    }\n\n    return proxy;\n};\n\n// Minimum delay before invoking the update of observers.\nvar REFRESH_DELAY = 20;\n\n// A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\n\n// Check if MutationObserver is available.\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\nvar ResizeObserverController = function() {\n    this.connected_ = false;\n    this.mutationEventsAdded_ = false;\n    this.mutationsObserver_ = null;\n    this.observers_ = [];\n\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n};\n\n/**\r\n * Adds observer to observers list.\r\n *\r\n * @param {ResizeObserverSPI} observer - Observer to be added.\r\n * @returns {void}\r\n */\n\n\n/**\r\n * Holds reference to the controller's instance.\r\n *\r\n * @private {ResizeObserverController}\r\n */\n\n\n/**\r\n * Keeps reference to the instance of MutationObserver.\r\n *\r\n * @private {MutationObserver}\r\n */\n\n/**\r\n * Indicates whether DOM listeners have been added.\r\n *\r\n * @private {boolean}\r\n */\nResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n        this.observers_.push(observer);\n    }\n\n    // Add listeners if they haven't been added yet.\n    if (!this.connected_) {\n        this.connect_();\n    }\n};\n\n/**\r\n * Removes observer from observers list.\r\n *\r\n * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer);\n\n    // Remove observer if it's present in registry.\n    if (~index) {\n        observers.splice(index, 1);\n    }\n\n    // Remove listeners if controller has no connected observers.\n    if (!observers.length && this.connected_) {\n        this.disconnect_();\n    }\n};\n\n/**\r\n * Invokes the update of observers. It will continue running updates insofar\r\n * it detects changes.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_();\n\n    // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n    if (changesDetected) {\n        this.refresh();\n    }\n};\n\n/**\r\n * Updates every observer from observers list and notifies them of queued\r\n * entries.\r\n *\r\n * @private\r\n * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n *  dimensions of it's elements.\r\n */\nResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n        return observer.gatherActive(), observer.hasActive();\n    });\n\n    // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n    activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\n\n    return activeObservers.length > 0;\n};\n\n/**\r\n * Initializes DOM listeners.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n        return;\n    }\n\n    // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n        this.mutationsObserver_ = new MutationObserver(this.refresh);\n\n        this.mutationsObserver_.observe(document, {\n            attributes: true,\n            childList: true,\n            characterData: true,\n            subtree: true\n        });\n    } else {\n        document.addEventListener('DOMSubtreeModified', this.refresh);\n\n        this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n};\n\n/**\r\n * Removes DOM listeners.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n        return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n        this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n        document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n};\n\n/**\r\n * \"Transitionend\" event handler.\r\n *\r\n * @private\r\n * @param {TransitionEvent} event\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.onTransitionEnd_ = function (ref) {\n        var propertyName = ref.propertyName; if ( propertyName === void 0 ) propertyName = '';\n\n    // Detect whether transition may affect dimensions of an element.\n    var isReflowProperty = transitionKeys.some(function (key) {\n        return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n        this.refresh();\n    }\n};\n\n/**\r\n * Returns instance of the ResizeObserverController.\r\n *\r\n * @returns {ResizeObserverController}\r\n */\nResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n        this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n};\n\nResizeObserverController.instance_ = null;\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\nvar defineConfigurable = (function (target, props) {\n    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {\n        var key = list[i];\n\n        Object.defineProperty(target, key, {\n            value: props[key],\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n    }\n\n    return target;\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\nvar getWindowOf = (function (target) {\n    // Assume that the element is an instance of Node, which means that it\n    // has the \"ownerDocument\" property from which we can retrieve a\n    // corresponding global object.\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\n\n    // Return the local global object if it's not possible extract one from\n    // provided element.\n    return ownerGlobal || global$1;\n});\n\n// Placeholder of an empty content rectangle.\nvar emptyRect = createRectInit(0, 0, 0, 0);\n\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\nfunction toFloat(value) {\n    return parseFloat(value) || 0;\n}\n\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\nfunction getBordersSize(styles) {\n    var positions = [], len = arguments.length - 1;\n    while ( len-- > 0 ) positions[ len ] = arguments[ len + 1 ];\n\n    return positions.reduce(function (size, position) {\n        var value = styles['border-' + position + '-width'];\n\n        return size + toFloat(value);\n    }, 0);\n}\n\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\nfunction getPaddings(styles) {\n    var positions = ['top', 'right', 'bottom', 'left'];\n    var paddings = {};\n\n    for (var i = 0, list = positions; i < list.length; i += 1) {\n        var position = list[i];\n\n        var value = styles['padding-' + position];\n\n        paddings[position] = toFloat(value);\n    }\n\n    return paddings;\n}\n\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\nfunction getSVGContentRect(target) {\n    var bbox = target.getBBox();\n\n    return createRectInit(0, 0, bbox.width, bbox.height);\n}\n\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\nfunction getHTMLElementContentRect(target) {\n    // Client width & height properties can't be\n    // used exclusively as they provide rounded values.\n    var clientWidth = target.clientWidth;\n    var clientHeight = target.clientHeight;\n\n    // By this condition we can catch all non-replaced inline, hidden and\n    // detached elements. Though elements with width & height properties less\n    // than 0.5 will be discarded as well.\n    //\n    // Without it we would need to implement separate methods for each of\n    // those cases and it's not possible to perform a precise and performance\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n    // gives wrong results for elements with width & height less than 0.5.\n    if (!clientWidth && !clientHeight) {\n        return emptyRect;\n    }\n\n    var styles = getWindowOf(target).getComputedStyle(target);\n    var paddings = getPaddings(styles);\n    var horizPad = paddings.left + paddings.right;\n    var vertPad = paddings.top + paddings.bottom;\n\n    // Computed styles of width & height are being used because they are the\n    // only dimensions available to JS that contain non-rounded values. It could\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\n    var width = toFloat(styles.width),\n        height = toFloat(styles.height);\n\n    // Width & height include paddings and borders when the 'border-box' box\n    // model is applied (except for IE).\n    if (styles.boxSizing === 'border-box') {\n        // Following conditions are required to handle Internet Explorer which\n        // doesn't include paddings and borders to computed CSS dimensions.\n        //\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\n        // properties then it's either IE, and thus we don't need to subtract\n        // anything, or an element merely doesn't have paddings/borders styles.\n        if (Math.round(width + horizPad) !== clientWidth) {\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\n        }\n\n        if (Math.round(height + vertPad) !== clientHeight) {\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n        }\n    }\n\n    // Following steps can't be applied to the document's root element as its\n    // client[Width/Height] properties represent viewport area of the window.\n    // Besides, it's as well not necessary as the <html> itself neither has\n    // rendered scroll bars nor it can be clipped.\n    if (!isDocumentElement(target)) {\n        // In some browsers (only in Firefox, actually) CSS width & height\n        // include scroll bars size which can be removed at this step as scroll\n        // bars are the only difference between rounded dimensions + paddings\n        // and \"client\" properties, though that is not always true in Chrome.\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\n\n        // Chrome has a rather weird rounding of \"client\" properties.\n        // E.g. for an element with content width of 314.2px it sometimes gives\n        // the client width of 315px and for the width of 314.7px it may give\n        // 314px. And it doesn't happen all the time. So just ignore this delta\n        // as a non-relevant.\n        if (Math.abs(vertScrollbar) !== 1) {\n            width -= vertScrollbar;\n        }\n\n        if (Math.abs(horizScrollbar) !== 1) {\n            height -= horizScrollbar;\n        }\n    }\n\n    return createRectInit(paddings.left, paddings.top, width, height);\n}\n\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\nvar isSVGGraphicsElement = (function () {\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n    // interface.\n    if (typeof SVGGraphicsElement !== 'undefined') {\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\n    }\n\n    // If it's so, then check that element is at least an instance of the\n    // SVGElement and that it has the \"getBBox\" method.\n    // eslint-disable-next-line no-extra-parens\n    return function (target) { return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function'; };\n})();\n\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\nfunction isDocumentElement(target) {\n    return target === getWindowOf(target).document.documentElement;\n}\n\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\nfunction getContentRect(target) {\n    if (!isBrowser) {\n        return emptyRect;\n    }\n\n    if (isSVGGraphicsElement(target)) {\n        return getSVGContentRect(target);\n    }\n\n    return getHTMLElementContentRect(target);\n}\n\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\nfunction createReadOnlyRect(ref) {\n    var x = ref.x;\n    var y = ref.y;\n    var width = ref.width;\n    var height = ref.height;\n\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n    var rect = Object.create(Constr.prototype);\n\n    // Rectangle's properties are not writable and non-enumerable.\n    defineConfigurable(rect, {\n        x: x, y: y, width: width, height: height,\n        top: y,\n        right: x + width,\n        bottom: height + y,\n        left: x\n    });\n\n    return rect;\n}\n\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\nfunction createRectInit(x, y, width, height) {\n    return { x: x, y: y, width: width, height: height };\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\nvar ResizeObservation = function(target) {\n    this.broadcastWidth = 0;\n    this.broadcastHeight = 0;\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n\n    this.target = target;\n};\n\n/**\r\n * Updates content rectangle and tells whether it's width or height properties\r\n * have changed since the last broadcast.\r\n *\r\n * @returns {boolean}\r\n */\n\n\n/**\r\n * Reference to the last observed content rectangle.\r\n *\r\n * @private {DOMRectInit}\r\n */\n\n\n/**\r\n * Broadcasted width of content rectangle.\r\n *\r\n * @type {number}\r\n */\nResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n\n    this.contentRect_ = rect;\n\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n};\n\n/**\r\n * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n * from the corresponding properties of the last observed content rectangle.\r\n *\r\n * @returns {DOMRectInit} Last observed content rectangle.\r\n */\nResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n\n    return rect;\n};\n\nvar ResizeObserverEntry = function(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit);\n\n    // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n    defineConfigurable(this, { target: target, contentRect: contentRect });\n};\n\nvar ResizeObserverSPI = function(callback, controller, callbackCtx) {\n    this.activeObservations_ = [];\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n        throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n};\n\n/**\r\n * Starts observing provided element.\r\n *\r\n * @param {Element} target - Element to be observed.\r\n * @returns {void}\r\n */\n\n\n/**\r\n * Registry of the ResizeObservation instances.\r\n *\r\n * @private {Map<Element, ResizeObservation>}\r\n */\n\n\n/**\r\n * Public ResizeObserver instance which will be passed to the callback\r\n * function and used as a value of it's \"this\" binding.\r\n *\r\n * @private {ResizeObserver}\r\n */\n\n/**\r\n * Collection of resize observations that have detected changes in dimensions\r\n * of elements.\r\n *\r\n * @private {Array<ResizeObservation>}\r\n */\nResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    // Do nothing if current environment doesn't have the Element interface.\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n        return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n        throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_;\n\n    // Do nothing if element is already being observed.\n    if (observations.has(target)) {\n        return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n\n    this.controller_.addObserver(this);\n\n    // Force the update of observations.\n    this.controller_.refresh();\n};\n\n/**\r\n * Stops observing provided element.\r\n *\r\n * @param {Element} target - Element to stop observing.\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    // Do nothing if current environment doesn't have the Element interface.\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n        return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n        throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_;\n\n    // Do nothing if element is not being observed.\n    if (!observations.has(target)) {\n        return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n        this.controller_.removeObserver(this);\n    }\n};\n\n/**\r\n * Stops observing all elements.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n};\n\n/**\r\n * Collects observation instances the associated element of which has changed\r\n * it's content rectangle.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.gatherActive = function () {\n        var this$1 = this;\n\n    this.clearActive();\n\n    this.observations_.forEach(function (observation) {\n        if (observation.isActive()) {\n            this$1.activeObservations_.push(observation);\n        }\n    });\n};\n\n/**\r\n * Invokes initial callback function with a list of ResizeObserverEntry\r\n * instances collected from active resize observations.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n        return;\n    }\n\n    var ctx = this.callbackCtx_;\n\n    // Create ResizeObserverEntry instance for every active observation.\n    var entries = this.activeObservations_.map(function (observation) {\n        return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n};\n\n/**\r\n * Clears the collection of active observations.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n};\n\n/**\r\n * Tells whether observer has active observations.\r\n *\r\n * @returns {boolean}\r\n */\nResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n};\n\n// Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\nvar ResizeObserver = function(callback) {\n    if (!(this instanceof ResizeObserver)) {\n        throw new TypeError('Cannot call a class as a function.');\n    }\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n\n    observers.set(this, observer);\n};\n\n// Expose public methods of ResizeObserver.\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n    ResizeObserver.prototype[method] = function () {\n        return (ref = observers.get(this))[method].apply(ref, arguments);\n        var ref;\n    };\n});\n\nvar index = (function () {\n    // Export existing implementation if available.\n    if (typeof global$1.ResizeObserver !== 'undefined') {\n        return global$1.ResizeObserver;\n    }\n\n    return ResizeObserver;\n})();\n\nexport default index;\n","import { EventDispatcher } from './event';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\nexport class View extends EventDispatcher {\r\n\r\n\tconstructor (model, extensions) {\r\n\t\tsuper();\r\n\t\tthis._model = model;\r\n        this._extensions = extensions;\r\n        this._recycledCells = [];\r\n        this._cellReference = {};\r\n\t\tthis._template = \t'<div class=\"pgrid-content-pane\" style=\"position: relative;\">' +\r\n\t\t\t\t\t\t\t'\t<div class=\"pgrid-top-left-pane\" style=\"position: absolute;\">' +\r\n\t\t\t\t\t\t\t'\t\t<div class=\"pgrid-top-left-inner\" style=\"width: 100%; height: 100%; overflow: hidden; position: relative;\"></div>' +\r\n\t\t\t\t\t\t\t'\t</div>' +\r\n\t\t\t\t\t\t\t'\t<div class=\"pgrid-top-pane\" style=\"position: absolute;\">' +\r\n\t\t\t\t\t\t\t'\t\t<div class=\"pgrid-top-inner\" style=\"width: 100%; height: 100%; overflow: hidden; position: relative;\"></div>' +\r\n\t\t\t\t\t\t\t'\t</div>' +\r\n\t\t\t\t\t\t\t'\t<div class=\"pgrid-left-pane\" style=\"position: absolute;\">' +\r\n\t\t\t\t\t\t\t'\t\t<div class=\"pgrid-left-inner\" style=\"width: 100%; height: 100%; overflow: hidden; position: relative;\"></div>' +\r\n\t\t\t\t\t\t\t'\t</div>' +\r\n\t\t\t\t\t\t\t'\t<div class=\"pgrid-center-pane\" style=\"position: absolute;\">' +\r\n\t\t\t\t\t\t\t'\t\t<div class=\"pgrid-center-inner\" style=\"width: 100%; height: 100%; overflow: hidden; position: relative;\"></div>' +\r\n\t\t\t\t\t\t\t'\t</div>' +\r\n\t\t\t\t\t\t\t'\t<div class=\"pgrid-bottom-left-pane\" style=\"position: absolute;\">' +\r\n\t\t\t\t\t\t\t'\t\t<div class=\"pgrid-bottom-left-inner\" style=\"width: 100%; height: 100%; overflow: hidden; position: relative;\"></div>' +\r\n\t\t\t\t\t\t\t'\t</div>' +\r\n\t\t\t\t\t\t\t'\t<div class=\"pgrid-bottom-pane\" style=\"position: absolute;\">' +\r\n\t\t\t\t\t\t\t'\t\t<div class=\"pgrid-bottom-inner\" style=\"width: 100%; height: 100%; overflow: hidden; position: relative;\"></div>' +\r\n\t\t\t\t\t\t\t'\t</div>' +\r\n\t\t\t\t\t\t\t'</div>' +\r\n\t\t\t\t\t\t\t'<div class=\"pgrid-hscroll\" style=\"position: absolute; bottom: 0px; overflow-y: hidden; overflow-x: scroll;\">' +\r\n\t\t\t\t\t\t\t'\t<div class=\"pgrid-hscroll-thumb\"></div>' +\r\n\t\t\t\t\t\t\t'</div>' +\r\n\t\t\t\t\t\t\t'<div class=\"pgrid-vscroll\" style=\"position: absolute; right: 0px; top: 0px; overflow-y: scroll; overflow-x: hidden;\">' +\r\n\t\t\t\t\t\t\t'\t<div class=\"pgrid-vscroll-thumb\"></div>' +\r\n\t\t\t\t\t\t\t'</div>';\r\n\t}\r\n\r\n\trender (element) {\r\n\t\tthis._element = element;\r\n\t\tthis._element.className = 'pgrid';\r\n\t\tthis._element.innerHTML = this._template;\r\n\t\tthis._element.style.position = 'relative';\r\n\t\tthis._element.style.overflow = 'hidden';\r\n\t\tthis._element.tabIndex = 1;\r\n\r\n\t\tthis._contentPane = this._element.querySelector('.pgrid-content-pane');\r\n\t\tthis._topLeftPane = this._element.querySelector('.pgrid-top-left-pane');\r\n\t\tthis._topLeftInner = this._element.querySelector('.pgrid-top-left-inner');\r\n\t\tthis._topPane = this._element.querySelector('.pgrid-top-pane');\r\n\t\tthis._topInner = this._element.querySelector('.pgrid-top-inner');\r\n\t\tthis._leftPane = this._element.querySelector('.pgrid-left-pane');\r\n\t\tthis._leftInner = this._element.querySelector('.pgrid-left-inner');\r\n\t\tthis._centerPane = this._element.querySelector('.pgrid-center-pane');\r\n\t\tthis._centerInner = this._element.querySelector('.pgrid-center-inner');\r\n\t\tthis._bottomPane = this._element.querySelector('.pgrid-bottom-pane');\r\n\t\tthis._bottomInner = this._element.querySelector('.pgrid-bottom-inner');\r\n\t\tthis._bottomLeftPane = this._element.querySelector('.pgrid-bottom-left-pane');\r\n\t\tthis._bottomLeftInner = this._element.querySelector('.pgrid-bottom-left-inner');\r\n\r\n\t\tthis._scrollWidth = this._measureScrollbarWidth();\r\n\r\n\t\tthis._hScroll = this._element.querySelector('.pgrid-hscroll');\r\n\t\tthis._vScroll = this._element.querySelector('.pgrid-vscroll');\r\n\t\tthis._hScrollThumb = this._element.querySelector('.pgrid-hscroll-thumb');\r\n\t\tthis._vScrollThumb = this._element.querySelector('.pgrid-vscroll-thumb');\r\n\t\tthis._hScroll.style.height = this._scrollWidth + 'px';\r\n\t\tthis._vScroll.style.width = this._scrollWidth + 'px';\r\n\t\tthis._hScrollThumb.style.height = this._scrollWidth + 'px';\r\n\t\tthis._vScrollThumb.style.width = this._scrollWidth + 'px';\r\n\r\n\t\tthis._observeSize();\r\n\t\tthis._resturecture();\r\n\t\tthis._attachHandlers();\r\n\r\n\t\tthis._extensions.executeExtension('gridAfterRender', {\r\n\t\t\tgrid: this\r\n\t\t});\r\n\t}\r\n\r\n\treRender () {\r\n\t\tthis._topLeftInner.innerHTML = '';\r\n\t\tthis._topInner.innerHTML = '';\r\n\t\tthis._leftInner.innerHTML = '';\r\n\t\tthis._centerInner.innerHTML = '';\r\n\t\tthis._bottomLeftInner.innerHTML = '';\r\n        this._bottomInner.innerHTML = '';\r\n        this._cellReference = [];\r\n\r\n        this._model.calcTotalSize();\r\n\t\tthis._resturecture();\r\n\t}\r\n\r\n\tgetElement () {\r\n\t\treturn this._element;\r\n\t}\r\n\r\n\tsetScrollX (x, adjustScrollBar) {\r\n\t\tthis._topPane.scrollLeft = x;\r\n\t\tthis._centerPane.scrollLeft = x;\r\n\t\tthis._bottomPane.scrollLeft = x;\r\n\t\tif (adjustScrollBar || adjustScrollBar === undefined) {\r\n\t\t\tthis._hScroll.scrollLeft = x;\r\n\t\t}\r\n\t}\r\n\r\n\tgetScrollX () {\r\n\t\treturn this._centerPane.scrollLeft;\r\n\t}\r\n\r\n\tsetScrollY (y, adjustScrollBar) {\r\n        let maxScrollY = this._leftInner.clientHeight - this._leftPane.clientHeight;\r\n        if (y > maxScrollY) {\r\n            y = maxScrollY;\r\n        }\r\n\t\tthis._centerPane.scrollTop = y;\r\n\t\tthis._leftPane.scrollTop = y;\r\n\t\tif (adjustScrollBar || adjustScrollBar === undefined) {\r\n\t\t\tthis._vScroll.scrollTop = y;\r\n\t\t}\r\n\t}\r\n\r\n\tgetScrollY () {\r\n\t\treturn this._centerPane.scrollTop;\r\n\t}\r\n\r\n\tscrollToCell (rowIndex, colIndex, alignTop) {\r\n\t\tlet cell = this.getCell(rowIndex, colIndex);\r\n\t\tlet origScrollTop = cell.parentElement.parentElement.scrollTop;\r\n\t\tlet origScrollLeft = cell.parentElement.parentElement.scrollLeft;\r\n\r\n\t\tcell.scrollIntoViewIfNeeded(false);\r\n\r\n\t\tif (origScrollTop !== cell.parentElement.parentElement.scrollTop) {\r\n\t\t\tthis.setScrollY(cell.parentElement.parentElement.scrollTop, true);\r\n\t\t}\r\n\t\tif (origScrollLeft !== cell.parentElement.parentElement.scrollLeft) {\r\n\t\t\tthis.setScrollX(cell.parentElement.parentElement.scrollLeft, true);\r\n\t\t}\r\n\t}\r\n\r\n\tgetCell (rowIndex, colIndex, createNewCell) {\r\n        let cell = this._element.querySelector('[data-row-index=\"'+rowIndex+'\"][data-col-index=\"'+colIndex+'\"]');\r\n        if (cell) {\r\n            return cell;\r\n        } else\r\n        if (createNewCell === false) {\r\n            return null;\r\n        } else {\r\n            let leftFreezeSize = this._model.getLeftFreezeSize();\r\n            let topFreezeSize = this._model.getTopFreezeSize();\r\n            let bottomFreezeSize = this._model.getBottomFreezeSize();\r\n            let cellRect = this._getCellRect(rowIndex, colIndex);\r\n            let scrollX = this.getScrollX();\r\n            let scrollY = this.getScrollY();\r\n            let gridRect = this._element.getBoundingClientRect();\r\n            if (cellRect.x > leftFreezeSize) {\r\n                if (cellRect.x < (scrollX + leftFreezeSize)) {\r\n                    this.setScrollX(cellRect.x - leftFreezeSize);\r\n                } else\r\n                if (scrollX + gridRect.width < cellRect.x + cellRect.width) {\r\n                    this.setScrollX((cellRect.x + cellRect.width) - gridRect.width);\r\n                }\r\n            }\r\n            if (cellRect.y < (scrollY + topFreezeSize)) {\r\n                this.setScrollY(cellRect.y);\r\n            } else\r\n            if ((scrollY + gridRect.height) - bottomFreezeSize < cellRect.y + cellRect.height) {\r\n                this.setScrollY((cellRect.y + cellRect.height) - gridRect.height);\r\n            }\r\n            this._renderCells();\r\n            return this._element.querySelector('[data-row-index=\"'+rowIndex+'\"][data-col-index=\"'+colIndex+'\"]');\r\n        }\r\n\t}\r\n\r\n\tupdateCell (rowIndex, colIndex) {\r\n        //Ignore updating cell that's outside of the viewport\r\n\t\tlet cell = this.getCell(rowIndex, colIndex, false);\r\n\t\tif (cell) {\r\n\t\t\t//Create cell content wrapper if not any\r\n\t\t\tlet cellContent = cell.firstChild;\r\n\r\n\t\t\t//Get data to be updated\r\n\t\t\tlet data = this._model.getDataAt(rowIndex, colIndex);\r\n\r\n\t\t\t//Data can be transformed before rendering using dataBeforeRender extension\r\n\t\t\tlet arg = {data: data};\r\n\t\t\tthis._extensions.executeExtension('dataBeforeRender', arg);\r\n\t\t\tdata = arg.data;\r\n\r\n\t\t\t//If there's cellUpdate extension, then execute it to update the cell data\r\n\t\t\t//Else use default way to put the data directly to the cell content\r\n            let handledByExt = false;\r\n            let rowId = this._model.getRowId(rowIndex);\r\n            let field = this._model.getColumnField(colIndex);\r\n\t\t\tif (this._extensions.hasExtension('cellUpdate')) {\r\n\t\t\t\targ = {\r\n\t\t\t\t\tdata,\r\n\t\t\t\t\tcell,\r\n\t\t\t\t\tcellContent,\r\n\t\t\t\t\trowIndex,\r\n\t\t\t\t\tcolIndex,\r\n\t\t\t\t\trowId,\r\n\t\t\t\t\tfield,\r\n\t\t\t\t\thandled: false\r\n\t\t\t\t}\r\n\t\t\t\tthis._extensions.executeExtension('cellUpdate', arg);\r\n\t\t\t\thandledByExt = arg.handled;\r\n\t\t\t}\r\n\r\n\t\t\tif (!handledByExt) {\r\n\t\t\t\tif (data !== undefined && data !== null) {\r\n\t\t\t\t\tcellContent.innerHTML = data;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcellContent.innerHTML = '';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._extensions.executeExtension('cellAfterUpdate', {\r\n                data,\r\n                cell,\r\n                cellContent,\r\n                rowIndex,\r\n                colIndex,\r\n                rowId,\r\n                field,\r\n            });\r\n\t\t}\r\n\t}\r\n\r\n\t_attachHandlers () {\r\n\r\n\t\tthis._vScrollHandler = (e) => {\r\n            this.setScrollY(e.target.scrollTop, false);\r\n            this._renderCells();\r\n\t\t\tthis.dispatch('vscroll', e);\r\n\t\t};\r\n\r\n\t\tthis._hScrollHandler = (e) => {\r\n\t\t\tthis.setScrollX(e.target.scrollLeft, false);\r\n            this._renderCells();\r\n\t\t\tthis.dispatch('hscroll', e);\r\n\t\t};\r\n\r\n\t\tthis._wheelHandler = (e) => {\r\n\t\t\tlet currentX = this.getScrollX();\r\n\t\t\tlet currentY = this.getScrollY();\r\n\t\t\tthis.setScrollX(currentX + e.deltaX);\r\n\t\t\tthis.setScrollY(currentY + e.deltaY);\r\n            this._renderCells();\r\n\t\t\tif (e.deltaX !== 0) {\r\n\t\t\t\tthis.dispatch('hscroll', e);\r\n\t\t\t}\r\n\t\t\tif (e.deltaY !== 0) {\r\n\t\t\t\tthis.dispatch('vscroll', e);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis._keyDownHandler = (e) => {\r\n\t\t\tthis._extensions.executeExtension('keyDown', e);\r\n\t\t};\r\n\r\n\t\tthis._vScroll.addEventListener('scroll', this._vScrollHandler);\r\n\t\tthis._hScroll.addEventListener('scroll', this._hScrollHandler);\r\n\t\tthis._contentPane.addEventListener('wheel', this._wheelHandler);\r\n\t\tthis._element.addEventListener('keydown', this._keyDownHandler);\r\n\r\n\t}\r\n\r\n\t_resturecture () {\r\n\t\tthis._contentPane.style.width = 'calc(100% - ' + this._scrollWidth + 'px)';\r\n\t\tthis._contentPane.style.height = 'calc(100% - ' + this._scrollWidth + 'px)';\r\n\r\n\t\tlet topFreezeSize = this._model.getTopFreezeSize();\r\n\t\tlet bottomFreezeSize = this._model.getBottomFreezeSize();\r\n\t\tlet leftFreezeSize = this._model.getLeftFreezeSize();\r\n\r\n\t\tthis._topLeftPane.style.left = '0px';\r\n\t\tthis._topLeftPane.style.top = '0px';\r\n\t\tthis._topLeftPane.style.width = leftFreezeSize + 'px';\r\n\t\tthis._topLeftPane.style.height = topFreezeSize + 'px';\r\n\t\tthis._topPane.style.left = leftFreezeSize + 'px';\r\n\t\tthis._topPane.style.top = '0px';\r\n\t\tthis._topPane.style.width = 'calc(100% - ' + leftFreezeSize + 'px)';\r\n\t\tthis._topPane.style.height = topFreezeSize + 'px';\r\n\t\tthis._leftPane.style.left = '0px';\r\n\t\tthis._leftPane.style.top = topFreezeSize + 'px';\r\n\t\tthis._leftPane.style.width = leftFreezeSize + 'px';\r\n\t\tthis._leftPane.style.height = 'calc(100% - ' + (topFreezeSize + bottomFreezeSize) + 'px)';\r\n\t\tthis._centerPane.style.left = leftFreezeSize + 'px';\r\n\t\tthis._centerPane.style.top = topFreezeSize + 'px';\r\n\t\tthis._centerPane.style.width = 'calc(100% - ' + leftFreezeSize + 'px)';\r\n\t\tthis._centerPane.style.height = 'calc(100% - ' + (topFreezeSize + bottomFreezeSize) + 'px)';\r\n\t\tthis._bottomLeftPane.style.left = '0px';\r\n\t\tthis._bottomLeftPane.style.bottom = '0px';\r\n\t\tthis._bottomLeftPane.style.width = leftFreezeSize + 'px';\r\n\t\tthis._bottomLeftPane.style.height = bottomFreezeSize + 'px';\r\n\t\tthis._bottomPane.style.left = leftFreezeSize + 'px';\r\n\t\tthis._bottomPane.style.bottom = '0px';\r\n\t\tthis._bottomPane.style.width = 'calc(100% - ' + leftFreezeSize + 'px)';\r\n\t\tthis._bottomPane.style.height = bottomFreezeSize + 'px';\r\n\r\n\t\tthis._renderCells();\r\n\t\tthis._updateScrollBar();\r\n\t}\r\n\r\n\t_observeSize () {\r\n\t\tthis._resizeObserver = new ResizeObserver((entries, observer) => {\r\n\t\t\tthis._updateScrollBar();\r\n\t\t});\r\n\t\tthis._resizeObserver.observe(this._element);\r\n\t}\r\n\r\n\t_updateScrollBar () {\r\n\t\tlet totalWidth = this._model.getTotalWidth();\r\n\t\tlet totalHeight = this._model.getTotalHeight();\r\n\t\tthis._hScrollThumb.style.width = totalWidth + 'px';\r\n\t\tthis._vScrollThumb.style.height = totalHeight + 'px';\r\n\r\n\t\tlet gridRect = this._element.getBoundingClientRect();\r\n\t\tlet scrollBarState = this._model.determineScrollbarState(gridRect.width, gridRect.height, this._scrollWidth);\r\n\r\n\t\tswitch (scrollBarState) {\r\n\t\t\tcase 'n':\r\n\t\t\t\tthis._hScroll.style.display = 'none';\r\n\t\t\t\tthis._vScroll.style.display = 'none';\r\n\t\t\t\tthis._contentPane.style.width = '100%';\r\n\t\t\t\tthis._contentPane.style.height = '100%';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'h':\r\n\t\t\t\tthis._hScroll.style.display = 'block';\r\n\t\t\t\tthis._vScroll.style.display = 'none';\r\n\t\t\t\tthis._hScroll.style.width = '100%';\r\n\t\t\t\tthis._contentPane.style.width = '100%';\r\n\t\t\t\tthis._contentPane.style.height = 'calc(100% - ' + this._scrollWidth + 'px)';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'v':\r\n\t\t\t\tthis._hScroll.style.display = 'none';\r\n\t\t\t\tthis._vScroll.style.display = 'block';\r\n\t\t\t\tthis._vScroll.style.height = '100%';\r\n\t\t\t\tthis._contentPane.style.width = 'calc(100% - ' + this._scrollWidth + 'px)';\r\n\t\t\t\tthis._contentPane.style.height = '100%';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'b':\r\n\t\t\t\tthis._hScroll.style.display = 'block';\r\n\t\t\t\tthis._vScroll.style.display = 'block';\r\n\t\t\t\tthis._hScroll.style.width = 'calc(100% - ' + this._scrollWidth + 'px)';\r\n\t\t\t\tthis._vScroll.style.height = 'calc(100% - ' + this._scrollWidth + 'px)';\r\n\t\t\t\tthis._contentPane.style.width = 'calc(100% - ' + this._scrollWidth + 'px)';\r\n\t\t\t\tthis._contentPane.style.height = 'calc(100% - ' + this._scrollWidth + 'px)';\r\n\t\t\t\tbreak;\r\n\t\t}\r\n    }\r\n\r\n    _getCellRect (rowIndex, colIndex) {\r\n\t\tlet topRunner = 0;\r\n        let leftRunner = 0;\r\n        let cellWidth = 0;\r\n        let cellHeight = 0;\r\n        for (let i=0; i<rowIndex; i++) {\r\n            cellHeight = this._model.getRowHeight(i)\r\n            topRunner += cellHeight;\r\n        }\r\n        for (let i=0; i<colIndex; i++) {\r\n            cellWidth = this._model.getColumnWidth(i);\r\n            leftRunner += cellWidth;\r\n        }\r\n        return {x: leftRunner, y: topRunner, width: cellWidth, height: cellHeight};\r\n    }\r\n\r\n\t_renderCells () {\r\n\t\tlet topFreeze = this._model.getTopFreezeRows();\r\n\t\tlet leftFreeze = this._model.getLeftFreezeRows();\r\n\t\tlet bottomFreeze = this._model.getBottomFreezeRows();\r\n\t\tlet rowCount = this._model.getRowCount();\r\n\t\tlet columnCount = this._model.getColumnCount();\r\n\t\tlet topRunner = 0;\r\n\t\tlet leftRunner = 0;\r\n\t\tlet colWidth = [];\r\n        let paneScrollLeft = 0;\r\n        let paneScrollTop = 0;\r\n        let paneWidth = 0;\r\n        let paneHeight = 0;\r\n        let paneScrollLeft2 = 0;\r\n        let paneScrollTop2 = 0;\r\n        let paneWidth2 = 0;\r\n        let paneHeight2 = 0;\r\n\r\n\t\t//Render top rows\r\n        paneScrollLeft = this._topLeftPane.scrollLeft;\r\n        paneScrollTop = this._topLeftPane.scrollTop;\r\n        paneWidth = this._topLeftPane.offsetWidth;\r\n        paneHeight = this._topLeftPane.offsetHeight;\r\n        paneScrollLeft2 = this._topPane.scrollLeft;\r\n        paneScrollTop2 = this._topPane.scrollTop;\r\n        paneWidth2 = this._topPane.offsetWidth;\r\n        paneHeight2 = this._topPane.offsetHeight;\r\n        topRunner = 0;\r\n\t\tfor (let j=0; j<topFreeze; j++) {\r\n\t\t\tlet rowHeight = this._model.getRowHeight(j);\r\n\t\t\t//Render top left cells\r\n            leftRunner = 0;\r\n\t\t\tfor (let i=0; i<leftFreeze; i++) {\r\n\t\t\t\tcolWidth[i] = this._model.getColumnWidth(i);\r\n                this._renderCell(j, i, this._topLeftInner, paneWidth, paneHeight, paneScrollLeft, paneScrollTop, leftRunner, topRunner, colWidth[i], rowHeight);\r\n\t\t\t\tleftRunner += colWidth[i];\r\n            }\r\n\r\n\t\t\t//Render top cells\r\n\t\t\tleftRunner = 0;\r\n\t\t\tfor (let i=leftFreeze; i<columnCount; i++) {\r\n\t\t\t\tcolWidth[i] = this._model.getColumnWidth(i);\r\n\t\t\t\tthis._renderCell(j, i, this._topInner, paneWidth2, paneHeight2, paneScrollLeft2, paneScrollTop2, leftRunner, topRunner, colWidth[i], rowHeight);\r\n\t\t\t\tleftRunner += colWidth[i];\r\n\t\t\t}\r\n\t\t\ttopRunner += rowHeight;\r\n        }\r\n        this._topInner.style.width = leftRunner + 'px';\r\n        this._topInner.style.height = topRunner + 'px';\r\n\r\n\t\t//Render middle rows\r\n        paneScrollLeft = this._leftPane.scrollLeft;\r\n        paneScrollTop = this._leftPane.scrollTop;\r\n        paneWidth = this._leftPane.offsetWidth;\r\n        paneHeight = this._leftPane.offsetHeight;\r\n        paneScrollLeft2 = this._centerPane.scrollLeft;\r\n        paneScrollTop2 = this._centerPane.scrollTop;\r\n        paneWidth2 = this._centerPane.offsetWidth;\r\n        paneHeight2 = this._centerPane.offsetHeight;\r\n        topRunner = 0;\r\n\t\tfor (let j=topFreeze; j<(rowCount-bottomFreeze); j++) {\r\n\t\t\tlet rowHeight = this._model.getRowHeight(j);\r\n\t\t\t//Render left cells\r\n\t\t\tleftRunner = 0;\r\n\t\t\tfor (let i=0; i<leftFreeze; i++) {\r\n\t\t\t\tthis._renderCell(j, i, this._leftInner, paneWidth, paneHeight, paneScrollLeft, paneScrollTop, leftRunner, topRunner, colWidth[i], rowHeight);\r\n\t\t\t\tleftRunner += colWidth[i];\r\n\t\t\t}\r\n\t\t\t//Render center cells\r\n\t\t\tleftRunner = 0;\r\n\t\t\tfor (let i=leftFreeze; i<columnCount; i++) {\r\n\t\t\t\tthis._renderCell(j, i, this._centerInner, paneWidth2, paneHeight2, paneScrollLeft2, paneScrollTop2, leftRunner, topRunner, colWidth[i], rowHeight);\r\n\t\t\t\tleftRunner += colWidth[i];\r\n\t\t\t}\r\n\t\t\ttopRunner += rowHeight;\r\n\t\t}\r\n        this._leftInner.style.height = topRunner + 'px';\r\n        this._centerInner.style.width = leftRunner + 'px';\r\n        this._centerInner.style.height = topRunner + 'px';\r\n\r\n\t\t//Render bottom rows\r\n        paneScrollLeft = this._bottomLeftPane.scrollLeft;\r\n        paneScrollTop = this._bottomLeftPane.scrollTop;\r\n        paneWidth = this._bottomLeftPane.offsetWidth;\r\n        paneHeight = this._bottomLeftPane.offsetHeight;\r\n        paneScrollLeft2 = this._bottomPane.scrollLeft;\r\n        paneScrollTop2 = this._bottomPane.scrollTop;\r\n        paneWidth2 = this._bottomPane.offsetWidth;\r\n        paneHeight2 = this._bottomPane.offsetHeight;\r\n        topRunner = 0;\r\n\t\tfor (let j=(rowCount-bottomFreeze); j<rowCount; j++) {\r\n\t\t\tlet rowHeight = this._model.getRowHeight(j);\r\n\t\t\t//Render left cells\r\n\t\t\tleftRunner = 0;\r\n\t\t\tfor (let i=0; i<leftFreeze; i++) {\r\n\t\t\t\tthis._renderCell(j, i, this._bottomLeftInner, paneWidth, paneHeight, paneScrollLeft, paneScrollTop, leftRunner, topRunner, colWidth[i], rowHeight);\r\n\t\t\t\tleftRunner += colWidth[i];\r\n\t\t\t}\r\n\t\t\t//Render center cells\r\n\t\t\tleftRunner = 0;\r\n\t\t\tfor (let i=leftFreeze; i<columnCount; i++) {\r\n\t\t\t\tthis._renderCell(j, i, this._bottomInner, paneWidth2, paneHeight2, paneScrollLeft2, paneScrollTop2, leftRunner, topRunner, colWidth[i], rowHeight);\r\n\t\t\t\tleftRunner += colWidth[i];\r\n\t\t\t}\r\n\t\t\ttopRunner += rowHeight;\r\n\t\t}\r\n        this._bottomInner.style.width = leftRunner + 'px';\r\n        this._bottomInner.style.height = topRunner + 'px';\r\n    }\r\n\r\n    _isCellVisible (paneWidth, paneHeight, paneScrollLeft, paneScrollTop, cellX, cellY, cellWidth, cellHeight) {\r\n        if (cellX + cellWidth < paneScrollLeft ||\r\n            cellY + cellHeight < paneScrollTop ||\r\n            cellX > paneScrollLeft + paneWidth ||\r\n            cellY > paneScrollTop + paneHeight) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    _createCell (rowIndex, colIndex, x, y, width, height) {\r\n        let cell = null;\r\n        let key = rowIndex + ',' + colIndex;\r\n        if (this._recycledCells.length > 0) {\r\n            cell = this._recycledCells.pop();\r\n            cell.style.display = 'block';\r\n        } else {\r\n            cell = document.createElement('div');\r\n        }\r\n        if (!cell.firstChild) {\r\n            let cellContent = document.createElement('div');\r\n            cellContent.className = 'pgrid-cell-content';\r\n            cell.appendChild(cellContent);\r\n        }\r\n\t\tcell.style.left = x + 'px';\r\n\t\tcell.style.top = y + 'px';\r\n\t\tcell.style.width = width + 'px';\r\n\t\tcell.style.height = height + 'px';\r\n        cell.dataset.rowIndex = rowIndex;\r\n        cell.dataset.colIndex = colIndex;\r\n        cell.dataset.key = key;\r\n\r\n        this._cellReference[key] = cell;\r\n        return cell;\r\n    }\r\n\r\n    _recycleCell (cell) {\r\n        //Clear cell reference cache\r\n        this._cellReference[cell.dataset.key] = null;\r\n\r\n        //Clear cell content\r\n        cell.title = '';\r\n        let cellContent = cell.firstChild;\r\n        if (cellContent) {\r\n            while (cellContent.firstChild) {\r\n                cellContent.removeChild(cellContent.firstChild);\r\n            }\r\n        }\r\n\r\n        //Hide the cell instead of removing it from the DOM\r\n        cell.style.display = 'none';\r\n\r\n        //Push cell in the recycled list to be reused later\r\n        this._recycledCells.push(cell);\r\n\r\n        this._extensions.executeExtension('cellAfterRecycled', { cell });\r\n    }\r\n\r\n\t_renderCell (rowIndex, colIndex, pane, paneWidth, paneHeight, paneScrollLeft, paneScrollTop, x, y, width, height) {\r\n        let key = rowIndex + ',' + colIndex;\r\n\r\n        //If the cell is outside of the viewport, then recycle the cell if it has already been created\r\n        if (!this._isCellVisible(paneWidth, paneHeight, paneScrollLeft, paneScrollTop, x, y, width, height)) {\r\n            let cell = this._cellReference[key];\r\n            if (cell) {\r\n                this._recycleCell(cell);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        //If the cell already rendered, just skip the rendering\r\n        let existingCell = this._cellReference[key];\r\n        if (existingCell) {\r\n            return true;\r\n        }\r\n\r\n\t\tlet data = this._model.getDataAt(rowIndex, colIndex);\r\n\r\n        //Data can be transformed before rendering using dataBeforeRender extension\r\n\t\tlet arg = {data: data};\r\n\t\tthis._extensions.executeExtension('dataBeforeRender', arg);\r\n\t\tdata = arg.data;\r\n\r\n\t\tlet cell = this._createCell(rowIndex, colIndex, x, y, width, height);\r\n\t\tlet cellClasses = this._model.getCellClasses(rowIndex, colIndex);\r\n\t\tcell.className = 'pgrid-cell ' + cellClasses.join(' ');\r\n\r\n\t\tpane.appendChild(cell);\r\n        let cellContent = cell.firstChild;\r\n\t\tlet eventArg = {\r\n\t\t\tcell,\r\n\t\t\tcellContent,\r\n\t\t\trowIndex,\r\n\t\t\tcolIndex,\r\n\t\t\tdata,\r\n\t\t\trowId: this._model.getRowId(rowIndex),\r\n\t\t\tfield: this._model.getColumnField(colIndex),\r\n\t\t\thandled: false\r\n\t\t};\r\n\r\n\t\t//If there's cellRender extension, use cellRender extension to render the cell\r\n\t\t//Else just set the data to the cellContent directly\r\n\t\tlet handledByExt = false;\r\n\t\tif (this._extensions.hasExtension('cellRender')) {\r\n\t\t\tthis._extensions.executeExtension('cellRender', eventArg);\r\n\t\t\thandledByExt = eventArg.handled;\r\n\t\t}\r\n\r\n\t\tif (!handledByExt) {\r\n\t\t\tif (data !== undefined) {\r\n\t\t\t\tcellContent.innerHTML = data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._extensions.executeExtension('cellAfterRender', eventArg);\r\n\t\tthis._extensions.executeExtension('cellAfterUpdate', eventArg);\r\n\r\n        eventArg = null;\r\n\r\n        return true;\r\n\t}\r\n\r\n\t_measureScrollbarWidth () {\r\n\t\tvar inner = document.createElement('p');\r\n\t\tinner.style.width = '100%';\r\n\t\tinner.style.height = '200px';\r\n\t\tvar outmost = document.createElement('div');\r\n\t\toutmost.className = 'pgrid';\r\n\t\tvar outer = document.createElement('div');\r\n\t\touter.style.position = 'absolute';\r\n\t\touter.style.top = '0px';\r\n\t\touter.style.left = '0px';\r\n\t\touter.style.visibility = 'hidden';\r\n\t\touter.style.width = '200px';\r\n\t\touter.style.height = '150px';\r\n\t\touter.style.overflow = 'hidden';\r\n\t\touter.appendChild(inner);\r\n\t\toutmost.appendChild(outer);\r\n\t\tdocument.body.appendChild(outmost);\r\n\t\tvar w1 = inner.offsetWidth;\r\n\t\touter.style.overflow = 'scroll';\r\n\t\tvar w2 = inner.offsetWidth;\r\n\t\tif (w1 == w2) w2 = outer.clientWidth;\r\n\t\tdocument.body.removeChild (outmost);\r\n\t\treturn (w1 - w2) + (this._detectIE()?1:0);\r\n\t}\r\n\r\n\r\n\t_detectIE () {\r\n\t  var ua = window.navigator.userAgent;\r\n\t  var msie = ua.indexOf('MSIE ');\r\n\t  if (msie > 0) {\r\n\t    // IE 10 or older => return version number\r\n\t    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\r\n\t  }\r\n\r\n\t  var trident = ua.indexOf('Trident/');\r\n\t  if (trident > 0) {\r\n\t    // IE 11 => return version number\r\n\t    var rv = ua.indexOf('rv:');\r\n\t    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\r\n\t  }\r\n\r\n\t  var edge = ua.indexOf('Edge/');\r\n\t  if (edge > 0) {\r\n\t    // Edge (IE 12+) => return version number\r\n\t    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\r\n\t  }\r\n\t  // other browser\r\n\t  return false;\r\n\t}\r\n}","import { EventDispatcher } from './event';\r\n\r\nexport class Model extends EventDispatcher {\r\n\r\n\tconstructor (config, data, extension) {\r\n\t\tsuper();\r\n\t\tthis._config = config;\r\n\t\tthis._data = data;\r\n\t\tthis._extension = extension;\r\n\r\n\t\tthis._columnModel = [];\r\n\t\tthis._rowModel = {};\r\n\t\tthis._headerRowModel = {};\r\n\t\tthis._cellModel = {};\r\n\t\tthis._headerCellModel = {};\r\n\r\n\t\tif (this._config.headerRows) {\r\n\t\t\tfor (let i=0; i<this._config.headerRows.length; i++) {\r\n\t\t\t\tif (this._config.headerRows[i].i !== undefined) {\r\n\t\t\t\t\tthis._headerRowModel[this._config.headerRows[i].i] = this._config.headerRows[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._config.columns) {\r\n\t\t\tfor (let i=0; i<this._config.columns.length; i++) {\r\n\t\t\t\tif (this._config.columns[i].i !== undefined) {\r\n\t\t\t\t\tthis._columnModel[this._config.columns[i].i] = this._config.columns[i];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._columnModel[i] = this._config.columns[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._config.rows) {\r\n\t\t\tfor (let i=0; i<this._config.rows.length; i++) {\r\n\t\t\t\tthis._rowModel[this._config.rows[i].i] = this._config.rows[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._config.cells) {\r\n\t\t\tfor (let i=0; i<this._config.cells.length; i++) {\r\n\t\t\t\tlet model = this._config.cells[i];\r\n\t\t\t\tif (!this._cellModel[model.c]) {\r\n\t\t\t\t\tthis._cellModel[model.c] = {};\r\n\t\t\t\t}\r\n\t\t\t\tthis._cellModel[model.c][model.r] = model;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._config.headerCells) {\r\n\t\t\tfor (let i=0; i<this._config.headerCells.length; i++) {\r\n\t\t\t\tlet model = this._config.headerCells[i];\r\n\t\t\t\tif (!this._headerCellModel[model.c]) {\r\n\t\t\t\t\tthis._headerCellModel[model.c] = {};\r\n\t\t\t\t}\r\n\t\t\t\tthis._headerCellModel[model.c][model.r] = model;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.calcTotalSize();\r\n\t}\r\n\r\n\tcanEdit (rowIndex, colIndex) {\r\n\t\tlet rowModel = this.getRowModel(rowIndex);\r\n\t\tlet colModel = this.getColumnModel(colIndex);\r\n\t\tlet cellModel = this.getCellModel(rowIndex, colIndex);\r\n\t\tlet result = false;\r\n\r\n\t\tif ((rowModel && rowModel.editable) ||\r\n\t\t\t(colModel && colModel.editable) ||\r\n\t\t\t(cellModel && cellModel.editable)) {\r\n\t\t\tif ((rowModel && rowModel.editable === false) ||\r\n\t\t\t\t(colModel && colModel.editable === false) ||\r\n\t\t\t\t(cellModel && cellModel.editable === false)) {\r\n\t\t\t\tresult = false;\r\n\t\t\t} else {\r\n\t\t\t\tresult = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Editibility can be overridden by extension\r\n\t\tif (this._extension.hasExtension('cellEditableCheck')) {\r\n\t\t\t\r\n\t\t\t//Can Edit Overriding\r\n\t\t\tconst rowId = this.getRowId(rowIndex);\r\n\t\t\tconst field = this.getColumnField(colIndex);\r\n\t\t\tconst dataRow = this._data.getRowData(rowId);\r\n\t\t\tconst e = {\r\n\t\t\t\trowIndex: rowIndex,\r\n\t\t\t\tcolIndex: colIndex,\r\n\t\t\t\trowId: rowId,\r\n\t\t\t\tfield: field,\r\n\t\t\t\tdataRow: dataRow,\r\n\t\t\t\trowModel: rowModel,\r\n\t\t\t\tcolModel: colModel,\r\n\t\t\t\tcellModel: cellModel,\r\n\t\t\t\tcanEdit: result\r\n\t\t\t};\r\n\t\t\tthis._extension.executeExtension('cellEditableCheck', e);\r\n\t\t\tresult = e.canEdit;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tisHeaderRow (rowIndex) {\r\n\t\treturn rowIndex < this._config.headerRowCount;\r\n\t}\r\n\r\n\tgetColumnWidth (colIndex) {\r\n\t\tlet colModel = this._columnModel[colIndex];\r\n\t\tif (colModel && colModel.width !== undefined) {\r\n\t\t\treturn colModel.width;\r\n\t\t} else {\r\n\t\t\treturn this._config.columnWidth;\r\n\t\t}\r\n\t}\r\n\r\n\tgetRowHeight (rowIndex) {\r\n\t\tif (this.isHeaderRow(rowIndex)) {\r\n\r\n\t\t} else {\r\n\t\t\tconst dataRowIndex = rowIndex - this._config.headerRowCount;\r\n\t\t\tlet rowModel = this._rowModel[dataRowIndex];\r\n\t\t\tif (rowModel && rowModel.height !== undefined) {\r\n\t\t\t\treturn rowModel.height;\r\n\t\t\t} else {\r\n\t\t\t\treturn this._config.rowHeight;\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n\r\n\tgetColumnCount () {\r\n\t\treturn this._config.columns.length;\r\n\t}\r\n\r\n\tgetRowCount () {\r\n\t\tlet headerRowCount = this._config.headerRowCount;\r\n\t\treturn headerRowCount + this._data.getRowCount();\r\n\t}\r\n\r\n\tgetTopFreezeRows () {\r\n\t\tlet topFreeze = 0;\r\n\t\tif (this._config.headerRowCount !== undefined) {\r\n\t\t\ttopFreeze += this._config.headerRowCount; \r\n\t\t} else {\r\n\t\t\ttopFreeze += 1;\r\n\t\t}\r\n\t\tif (this._config.freezePane && this._config.freezePane.top > 0) {\r\n\t\t\ttopFreeze += this._config.freezePane.top;\r\n\t\t}\r\n\t\treturn topFreeze;\r\n\t}\r\n\r\n\tgetTopFreezeSize () {\r\n\t\tconst topFreezeRow = this.getTopFreezeRows(); \r\n\t\tlet sum = 0;\r\n\t\tfor (let i=0; i<topFreezeRow; i++) {\r\n\t\t\tsum += this.getRowHeight(i);\r\n\t\t}\r\n\t\treturn sum;\r\n\t}\r\n\r\n\tgetLeftFreezeRows () {\r\n\t\tif (this._config.freezePane && this._config.freezePane.left > 0) {\r\n\t\t\treturn this._config.freezePane.left;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tgetLeftFreezeSize () {\r\n\t\tif (this._config.freezePane && this._config.freezePane.left > 0) {\r\n\t\t\tlet sum = 0;\r\n\t\t\tfor (let i=0; i<this._config.freezePane.left; i++) {\r\n\t\t\t\tsum += this.getColumnWidth(i);\r\n\t\t\t}\r\n\t\t\treturn sum;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tgetBottomFreezeRows () {\r\n\t\tif (this._config.freezePane && this._config.freezePane.bottom > 0) {\r\n\t\t\treturn this._config.freezePane.bottom;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tgetBottomFreezeSize () {\r\n\t\treturn this._bottomFreezeSize;\r\n\t}\r\n\r\n\tgetColumnWidth (index) {\r\n\t\tif (this._columnModel[index] && this._columnModel[index].width !== undefined) {\r\n\t\t\treturn this._columnModel[index].width;\r\n\t\t}\r\n\t\treturn this._config.columnWidth;\r\n\t}\r\n\r\n\tgetRowHeight (index) {\r\n\t\tif (this._rowModel[index] && this._rowModel[index].height !== undefined) {\r\n\t\t\treturn this._rowModel[index].height;\r\n\t\t}\r\n\t\treturn this._config.rowHeight;\r\n\t}\r\n\r\n\tgetTotalWidth () {\r\n\t\treturn this._totalWidth;\r\n\t}\r\n\r\n\tgetTotalHeight () {\r\n\t\treturn this._totalHeight;\r\n\t}\r\n\r\n\tgetRowModel (rowIndex) {\r\n\t\tif (this.isHeaderRow(rowIndex)) {\r\n\t\t\treturn this._headerRowModel[rowIndex];\r\n\t\t} else {\r\n\t\t\tconst dataRowIndex = rowIndex - this._config.headerRowCount;\r\n\t\t\treturn this._rowModel[dataRowIndex];\r\n\t\t}\r\n\t}\r\n\r\n\tgetColumnModel (colIndex) {\r\n\t\treturn this._columnModel[colIndex];\r\n\t}\r\n\r\n\tgetCellModel (rowIndex, colIndex) {\r\n\t\tif (this.isHeaderRow(rowIndex)) {\r\n\t\t\tif (this._headerCellModel[colIndex]) {\r\n\t\t\t\treturn this._headerCellModel[colIndex][rowIndex];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst dataRowIndex = rowIndex - this._config.headerRowCount;\r\n\t\t\tif (this._cellModel[colIndex]) {\r\n\t\t\t\treturn this._cellModel[colIndex][dataRowIndex];\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n\r\n\tgetCascadedCellProp (rowIndex, colIndex, propName) {\r\n\t\tconst cellModel = this.getCellModel(rowIndex, colIndex);\r\n\t\tif (cellModel && cellModel[propName]) {\r\n\t\t\treturn cellModel[propName];\r\n\t\t}\r\n\r\n\t\tconst rowModel = this.getRowModel(rowIndex);\r\n\t\tif (rowModel && rowModel[propName]) {\r\n\t\t\treturn rowModel[propName];\r\n\t\t}\r\n\r\n\t\tconst columnModel = this.getColumnModel(colIndex);\r\n\t\tif (columnModel && columnModel[propName]) {\r\n\t\t\treturn columnModel[propName];\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tgetCellClasses (rowIndex, colIndex) {\r\n\t\tlet output = [];\r\n\t\tconst colModel = this.getColumnModel(colIndex);\r\n\t\tif (colModel) {\r\n\t\t\tif (colModel.cssClass) {\r\n\t\t\t\toutput.unshift(colModel.cssClass);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst isHeader = this.isHeaderRow(rowIndex);\r\n\t\tconst rowModel = this.getRowModel(rowIndex);\r\n\t\tif (rowModel) {\r\n\t\t\tif (isHeader) {\r\n\t\t\t\toutput.unshift('pgrid-row-header');\r\n\t\t\t}\r\n\t\t\tif (rowModel.cssClass) {\r\n\t\t\t\toutput.unshift(rowModel.cssClass);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst cellModel = this.getCellModel(rowIndex, colIndex);\r\n\t\tif (cellModel) {\r\n\t\t\tif (cellModel.cssClass) {\r\n\t\t\t\toutput.unshift(cellModel.cssClass);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\r\n\tdetermineScrollbarState (viewWidth, viewHeight, scrollbarSize) {\r\n\t\tlet needH = this._totalWidth > viewWidth;\r\n\t\tlet needV = this._totalHeight > viewHeight;\r\n\r\n\t\tif (needH && !needV) {\r\n\t\t\tneedV = this._totalHeight > (viewHeight - scrollbarSize);\r\n\t\t} else\r\n\t\tif (!needH && needV) {\r\n\t\t\tneedH = this._totalWidth > (viewWidth - scrollbarSize);\r\n\t\t}\r\n\r\n\t\tif (needH && needV) {\r\n\t\t\treturn 'b';\r\n\t\t} else\r\n\t\tif (!needH && needV) {\r\n\t\t\treturn 'v';\r\n\t\t} else\r\n\t\tif (needH && !needV) {\r\n\t\t\treturn 'h';\r\n\t\t}\r\n\t\treturn 'n';\r\n\t}\r\n\r\n\tgetDataAt (rowIndex, colIndex) {\r\n\t\tif (this.isHeaderRow(rowIndex)) {\r\n\t\t\tconst colModel = this.getColumnModel(colIndex);\r\n\t\t\tif (colModel && colModel.title) {\r\n\t\t\t\treturn colModel.title;\r\n\t\t\t} else {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst dataRowIndex = rowIndex - this._config.headerRowCount;\r\n\t\t\tconst colModel = this.getColumnModel(colIndex);\r\n\t\t\tif (colModel && colModel.field) {\r\n\t\t\t\treturn this._data.getDataAt(dataRowIndex, colModel.field);\r\n\t\t\t} else {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n\r\n    getRowDataAt (rowIndex) {\r\n\t\tif (this.isHeaderRow(rowIndex)) {\r\n            return undefined;\r\n\t\t} else {\r\n\t\t\tconst dataRowIndex = rowIndex - this._config.headerRowCount;\r\n            return this._data.getRowDataAt(dataRowIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tsetDataAt (rowIndex, colIndex, data) {\r\n\t\tconst dataRowIndex = rowIndex - this._config.headerRowCount;\r\n\t\tconst colModel = this.getColumnModel(colIndex);\r\n\t\tif (colModel && colModel.field) {\r\n\t\t\tthis._data.setDataAt(dataRowIndex, colModel.field, data);\r\n\t\t}\r\n\t}\r\n\r\n\tgetRowIndex (rowId) {\r\n\t\treturn this._config.headerRowCount + this._data.getRowIndex(rowId);\r\n\t}\r\n\r\n\tgetRowId (rowIndex) {\r\n\t\tif (rowIndex >= this._config.headerRowCount) {\r\n\t\t\treturn this._data.getRowId(rowIndex - this._config.headerRowCount);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tgetColumnIndex (field) {\r\n\t\tfor (let i=0; i<this._config.columns.length; i++) {\r\n\t\t\tif (this._config.columns[i].field === field) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tgetColumnField (colIndex) {\r\n\t\tif (this._config.columns[colIndex]) {\r\n\t\t\treturn this._config.columns[colIndex].field;\r\n\t\t}\r\n\t}\r\n\r\n\tcalcTotalSize() {\r\n\t\tthis._calcTotalWidth();\r\n\t\tthis._calcTotalHeight();\r\n\t\tthis._calcBottomFreezeSize();\r\n\t}\r\n\r\n\t_calcTotalWidth () {\r\n\t\tthis._totalWidth = 0;\r\n\t\tfor (let i=0; i<this._columnModel.length; i++) {\r\n\t\t\tif (this._columnModel[i].width !== undefined) {\r\n\t\t\t\tthis._totalWidth += this._columnModel[i].width;\r\n\t\t\t} else {\r\n\t\t\t\tthis._totalWidth += this._config.columnWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_calcTotalHeight () {\r\n\t\tlet headerRowModelCount = Object.keys(this._headerRowModel);\r\n\t\tthis._totalHeight = this._config.rowHeight * (this._config.headerRowCount - headerRowModelCount.length);\r\n\t\tfor (let index in this._headerRowModel) {\r\n\t\t\tif (this._headerRowModel[index].height !== undefined) {\r\n\t\t\t\tthis._totalHeight += this._headerRowModel[index].height;\r\n\t\t\t} else {\r\n\t\t\t\tthis._totalHeight += this._config.rowHeight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet rowModelCount = Object.keys(this._rowModel);\r\n\t\tthis._totalHeight += this._config.rowHeight * (this._data.getRowCount() - rowModelCount.length);\r\n\t\tfor (let index in this._rowModel) {\r\n\t\t\tif (this._rowModel[index].height !== undefined) {\r\n\t\t\t\tthis._totalHeight += this._rowModel[index].height;\r\n\t\t\t} else {\r\n\t\t\t\tthis._totalHeight += this._config.rowHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_calcBottomFreezeSize () {\r\n\t\tif (this._config.freezePane && this._config.freezePane.bottom > 0) {\r\n\t\t\tlet sum = 0;\r\n\t\t\tfor (let i=0; i<this._config.freezePane.bottom; i++) {\r\n\t\t\t\tsum += this.getRowHeight((this._config.rowCount-1)-i);\r\n\t\t\t}\r\n\t\t\tthis._bottomFreezeSize = sum;\r\n\t\t} else {\r\n\t\t\tthis._bottomFreezeSize = 0;\r\n\t\t}\r\n\t}\r\n}","import { EventDispatcher } from \"../grid/event\";\r\n\r\nconst CHANGE_EVENT_NAME = 'dataChanged';\r\n\r\nexport class DataTable extends EventDispatcher {\r\n\r\n    constructor (dataModel, extension) {\r\n        super();\r\n\r\n        this._extension = extension;\r\n        this._idRunner = 0;\r\n        this._rid = [];\r\n        this._rowMap = {};\r\n        this._data = [];\r\n        this._blockEvent = false;\r\n        this._processedEvent = [];\r\n        this._transformedRid = [];\r\n        this._searchQuery = null;\r\n        this._searchFields = null;\r\n        this._freezeCount = 0;\r\n\r\n        let { format, data, fields } = dataModel;\r\n\r\n        // Set default format at rows\r\n        if (!format) {\r\n            format = 'rows';\r\n        }\r\n        this._dataFormat = format;\r\n        this._fields = fields;\r\n\r\n        if (Array.isArray(data)) {\r\n            for (let i=0; i<data.length; i++) {\r\n                this.addRow(data[i]);\r\n            }\r\n        } else {\r\n            this._data = [];\r\n        }\r\n    }\r\n\r\n    getRowCount () {\r\n        return this._transformedRid.length;\r\n    }\r\n\r\n    getAllData() {\r\n        return this._data;\r\n    }\r\n\r\n    getData (rowId, field) {\r\n        let row = this._rowMap[rowId];\r\n        if (row) {\r\n            return row[field];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getDataAt (rowIndex, field) {\r\n        let rowId = this._transformedRid[rowIndex];\r\n        if (rowId) {\r\n            let row = this._rowMap[rowId];\r\n            if (row) {\r\n                return row[field];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getRowData (rowId) {\r\n        return this._rowMap[rowId];\r\n    }\r\n\r\n    getRowDataAt (rowIndex) {\r\n        let rowId = this._transformedRid[rowIndex];\r\n        if (rowId) {\r\n            return this._rowMap[rowId];\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getRowIndex (rowId) {\r\n        return this._transformedRid.indexOf(rowId);\r\n    }\r\n\r\n    getRowId (rowIndex) {\r\n        return this._transformedRid[rowIndex];\r\n    }\r\n\r\n    freeze () {\r\n        this._freezeCount++;\r\n    }\r\n\r\n    unfreeze () {\r\n        this._freezeCount--;\r\n        if (this._freezeCount < 0) {\r\n            this._freezeCount = 0;\r\n        }\r\n    }\r\n\r\n    setData (rowId, field, value) {\r\n\r\n        let row = this._rowMap[rowId];\r\n\r\n        //Skip updating if the data is not changing\r\n        if (row && row[field] === value) {\r\n            return;\r\n        }\r\n\r\n        const beforeUpdateArg = {\r\n            changeType: 'fieldChange',\r\n\t\t\trowId: rowId,\r\n            field: field,\r\n            prevData: row[field],\r\n\t\t\tdata: value,\r\n\t\t\tcancel: false\r\n        };\r\n\r\n        this._processedEvent.push(beforeUpdateArg);\r\n\r\n        let blocked = false;\r\n\r\n        if (!this._blockEvent) {\r\n\t\t\tthis._blockEvent = true;\r\n\t\t\tthis._extension.executeExtension('dataBeforeUpdate', beforeUpdateArg);\r\n\t\t\tthis._blockEvent = false;\r\n\t\t} else {\r\n            blocked = true;\r\n        }\r\n\r\n\t\tif (!beforeUpdateArg.cancel) {\r\n            if (row) {\r\n                row[field] = beforeUpdateArg.data;\r\n                if (!this._blockEvent) {\r\n                    this._blockEvent = true;\r\n                    this._extension.executeExtension('dataAfterUpdate', beforeUpdateArg);\r\n                    this._blockEvent = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!blocked) {\r\n            let eventArg = {\r\n                updates: this._processedEvent\r\n            };\r\n            this._extension.executeExtension('dataFinishUpdate', eventArg);\r\n            if (this._freezeCount === 0) {\r\n                setTimeout(() => {\r\n                    this.dispatch(CHANGE_EVENT_NAME, eventArg);\r\n                }, 100);\r\n            }\r\n            this._processedEvent = [];\r\n        }\r\n    }\r\n\r\n    setDataAt (rowIndex, field, value) {\r\n        const rowId = this._transformedRid[rowIndex];\r\n        if (rowId !== undefined) {\r\n            this.setData(rowId, field, value);\r\n        }\r\n    }\r\n\r\n    addRow (rowData) {\r\n        const count = this.getRowCount();\r\n        this.insertRow(count, rowData);\r\n    }\r\n\r\n    insertRow (rowIndex, rowData) {\r\n        let rid = null;\r\n        let inserted = false;\r\n        if (this._dataFormat === 'rows') {\r\n            rid = this._generateRowId();\r\n            this._rid.splice(rowIndex, 0, rid);\r\n            this._rowMap[rid] = rowData;\r\n            this._data.splice(rowIndex, 0, rowData);\r\n            inserted = true;\r\n        } else\r\n        if (this._dataFormat === 'array') {\r\n            if (Array.isArray(this._fields)) {\r\n                rid = this._generateRowId();\r\n                this._rid.splice(rowIndex, 0, rid);\r\n                let newObj = this._createObject(rowData, this._fields);\r\n                this._rowMap[rid] = newObj;\r\n                this._data.splice(rowIndex, 0, newObj);\r\n                inserted = true;\r\n            }\r\n        }\r\n\r\n        //Dispatch change event\r\n        if (inserted) {\r\n            if (this._freezeCount === 0) {\r\n                const eventArg = {\r\n                    updates: [{\r\n                        changeType: 'rowAdded',\r\n                        rowId: rid,\r\n                        data: this.getRowData(rid)\r\n                    }]\r\n                };\r\n                this.dispatch(CHANGE_EVENT_NAME, eventArg);\r\n            }\r\n        }\r\n\r\n        //Re-apply transformation if it's already there\r\n        if (this._searchQuery) {\r\n            this.search(this._searchQuery, this._searchFields);\r\n        } else {\r\n            this._transformedRid = this._rid.slice();\r\n        }\r\n    }\r\n\r\n    removeRow (rid) {\r\n        let row = this._rowMap[rid];\r\n        let index = this._data.indexOf(row);\r\n        let tIndex = this._transformedRid.indexOf(rid);\r\n        this._data.splice(index, 1);\r\n        this._rid.splice(index, 1);\r\n        this._transformedRid.splice(tIndex, 1);\r\n        delete this._rowMap[rid];\r\n\r\n        if (this._freezeCount === 0) {\r\n            const eventArg = {\r\n                updates: [{\r\n                    changeType: 'rowRemoved',\r\n                    rowId: rid\r\n                }]\r\n            };\r\n            this.dispatch(CHANGE_EVENT_NAME, eventArg);\r\n        }\r\n    }\r\n\r\n    removeRowAt (index) {\r\n        let rid = this.getRowId(index);\r\n        this.removeRow(rid);\r\n    }\r\n\r\n    removeAllRows () {\r\n        this._rid = [];\r\n        this._transformedRid = [];\r\n        this._rowMap = {};\r\n        this._data = [];\r\n\r\n        if (this._freezeCount === 0) {\r\n            const eventArg = {\r\n                updates: [{\r\n                    changeType: 'global'\r\n                }]\r\n            };\r\n            setTimeout(() => {\r\n                this.dispatch(CHANGE_EVENT_NAME, eventArg);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    search (query, fields) {\r\n        //Store for later use\r\n        this._searchQuery = query;\r\n        this._searchFields = fields;\r\n\r\n        //Cache field map for faster field search\r\n        let fieldMap = null;\r\n        if (fields) {\r\n            fieldMap = fields.reduce((acc, val) => {\r\n                acc[val] = true;\r\n            }, {});\r\n        }\r\n\r\n        //Filter rows\r\n        const regex = new RegExp(query, 'i');\r\n        this._transformedRid = this._rid.filter((rid) => {\r\n            const rowData = this._rowMap[rid];\r\n            if (rowData) {\r\n                for (var field in rowData) {\r\n                    if ((!fieldMap || fieldMap[field]) && rowData[field]) {\r\n                        if (regex.test(rowData[field])) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        //Dispatch global change event\r\n        if (this._freezeCount === 0) {\r\n            const eventArg = {\r\n                updates: [{\r\n                    changeType: 'global'\r\n                }]\r\n            };\r\n            this.dispatch(CHANGE_EVENT_NAME, eventArg);\r\n        }\r\n    }\r\n\r\n    clearSearch () {\r\n        this._transformedRid = this._rid.slice();\r\n        this._searchQuery = null;\r\n        this._searchFields = null;\r\n        if (this._freezeCount === 0) {\r\n            const eventArg = {\r\n                updates: [{\r\n                    changeType: 'global'\r\n                }]\r\n            };\r\n            this.dispatch(CHANGE_EVENT_NAME, eventArg);\r\n        }\r\n    }\r\n\r\n    _generateRowId () {\r\n        this._idRunner++;\r\n        return '' + this._idRunner;\r\n    }\r\n\r\n    _createObject(arrayValues, fields) {\r\n        let newObj = {};\r\n        for (let i=0; i<fields.length; i++) {\r\n            newObj[fields[i]] = arrayValues[i];\r\n        }\r\n        return newObj;\r\n    }\r\n\r\n}","export class Extension {\r\n\r\n\tconstructor (grid, config) {\r\n\t\tthis._grid = grid;\r\n\t\tthis._config = config;\r\n\t\tthis._extensionTable = {};\r\n\r\n\t\tthis._extensions = {\r\n\t\t\tcellRender: [],\r\n\t\t\tcellAfterRender: [],\r\n\t\t\tcellUpdate: [],\r\n\t\t\tcellAfterUpdate: [],\r\n\t\t\tcellEditableCheck: [],\r\n\t\t\tcellAfterRecycled: [],\r\n\t\t\tkeyDown: [],\r\n\t\t\tgridAfterRender: [],\r\n\t\t\tdataBeforeRender: [],\r\n\t\t\tdataBeforeUpdate: [],\r\n\t\t\tdataAfterUpdate: [],\r\n\t\t\tdataFinishUpdate: []\r\n\t\t}\r\n\t}\r\n\r\n\tloadExtension (ext, name) {\r\n\t\tif (ext['init']) {\r\n\t\t\text['init'](this._grid, this._config);\r\n\t\t}\r\n\t\tfor (let extPoint in this._extensions) {\r\n\t\t\tif (ext[extPoint]) {\r\n\t\t\t\tthis._extensions[extPoint].push(ext);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (name) {\r\n\t\t\tif (!this._extensionTable[name]) {\r\n\t\t\t\tthis._extensionTable[name] = ext;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Extension name \\'' + name + '\\' has already been loaded');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thasExtension (extPoint) {\r\n\t\treturn (this._extensions[extPoint] && this._extensions[extPoint].length > 0)\r\n\t}\r\n\r\n\tgetExtension (name) {\r\n\t\treturn this._extensionTable[name];\r\n\t}\r\n\r\n\tqueryExtension (extPoint) {\r\n\t\tif (this._extensions[extPoint]) {\r\n\t\t\treturn this._extensions[extPoint];\r\n\t\t} else {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\texecuteExtension (extPoint) {\r\n\t\tthis.queryExtension(extPoint).forEach((ext) => {\r\n\t\t\text[extPoint].apply(ext, Array.prototype.slice.call(arguments, 1));\r\n\t\t});\r\n\t}\r\n\r\n}","export class State {\r\n\r\n\tconstructor () {\r\n\t\tthis._state = {};\r\n\t}\r\n\r\n\texists (key) {\r\n\t\treturn (this._state[key] !== undefined);\r\n\t}\r\n\r\n\tget (key) {\r\n\t\treturn this._state[key];\r\n\t}\r\n\r\n\tset (key, value) {\r\n\t\tthis._state[key] = value;\r\n\t}\r\n\t\r\n}","export class Utils {\r\n\r\n\tstatic mixin(source, target) {\r\n\t\tfor (var prop in source) {\r\n\t\t\tif (source.hasOwnProperty(prop)) {\r\n\t\t\t\ttarget[prop] = source[prop];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n}","export class SelectionExtension {\r\n\r\n\tinit (grid, config) {\r\n\t\tthis._grid = grid;\r\n\t\tthis._config = config;\r\n\t\tthis._currentSelection = null;\r\n        this._selectionClass = (this._config.selection && this._config.selection.cssClass)?this._config.selection.cssClass:'pgrid-cell-selection';\r\n        this._mouseDownEventHandler = this._mouseDownEventHandler.bind(this);\r\n\t}\r\n\r\n\tkeyDown (e) {\r\n\t\tlet editing = this._grid.state.get('editing');\r\n\t\tif (editing) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet selection = this._grid.state.get('selection');\r\n\t\tif (selection && selection.length > 0) {\r\n\t\t\tlet rowIndex = selection[0].r;\r\n\t\t\tlet colIndex = selection[0].c;\r\n\t\t\tlet alignTop = true;\r\n\t\t\tswitch (e.keyCode) {\r\n\t\t\t\tcase 40: //Down\r\n\t\t\t\t\trowIndex++;\r\n\t\t\t\t\talignTop = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 38: //Up\r\n\t\t\t\t\trowIndex--;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 37: //Left\r\n\t\t\t\t\tcolIndex--;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 39: //Right\r\n\t\t\t\tcase 9: //Tab\r\n\t\t\t\t\tcolIndex++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (rowIndex >= 0 && rowIndex < this._grid.model.getRowCount() &&\r\n\t\t\t\tcolIndex >= 0 && colIndex < this._grid.model.getColumnCount()) {\r\n\t\t\t\tconst isHeader = this._grid.model.isHeaderRow(rowIndex);\r\n\t\t\t\tconst rowModel = this._grid.model.getRowModel(rowIndex);\r\n\t\t\t\tif (!rowModel || !isHeader) {\r\n\t\t\t\t\tlet cell = this._grid.view.getCell(rowIndex, colIndex);\r\n\t\t\t\t\tif (cell) {\r\n\t\t\t\t\t\tthis._selectCell(cell, rowIndex, colIndex);\r\n\t\t\t\t\t\tthis._grid.view.scrollToCell(rowIndex, colIndex, alignTop);\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcellAfterRender (e) {\r\n\t\te.cell.addEventListener('mousedown', this._mouseDownEventHandler);\r\n\t\tlet selection = this._grid.state.get('selection');\r\n\t\tif (selection && selection.length > 0 && selection[0].r === e.rowIndex && selection[0].c === e.colIndex) {\r\n\t\t\te.cell.classList.add(this._selectionClass);\r\n\t\t\tthis._currentSelection = e.cell;\r\n\t\t}\r\n    }\r\n\r\n    cellAfterRecycled (e) {\r\n        e.cell.removeEventListener('mousedown', this._mouseDownEventHandler, false);\r\n\t}\r\n\t\r\n\tselectCell (colIndex, rowIndex) {\r\n\t\tif (rowIndex >= 0 && rowIndex < this._grid.model.getRowCount() &&\r\n\t\t\tcolIndex >= 0 && colIndex < this._grid.model.getColumnCount()) {\r\n\t\t\tconst isHeader = this._grid.model.isHeaderRow(rowIndex);\r\n\t\t\tconst rowModel = this._grid.model.getRowModel(rowIndex);\r\n\t\t\tif (!rowModel || !isHeader) {\r\n\t\t\t\tlet cell = this._grid.view.getCell(rowIndex, colIndex);\r\n\t\t\t\tif (cell) {\r\n\t\t\t\t\tthis._selectCell(cell, rowIndex, colIndex);\r\n\t\t\t\t\tthis._grid.view.scrollToCell(rowIndex, colIndex, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    _mouseDownEventHandler (e) {\r\n        let actualCell = e.target;\r\n        if (actualCell.classList.contains('pgrid-cell-content')) {\r\n            actualCell = actualCell.parentElement;\r\n        }\r\n        const actualRow = parseInt(actualCell.dataset.rowIndex);\r\n        const actualCol = parseInt(actualCell.dataset.colIndex);\r\n        const rowModel = this._grid.model.getRowModel(actualRow);\r\n        const isHeader = this._grid.model.isHeaderRow(actualRow);\r\n        if (!rowModel || !isHeader) {\r\n            if (actualCell.classList.contains('pgrid-cell')) {\r\n                this._selectCell(actualCell, actualRow, actualCol);\r\n            }\r\n        }\r\n    }\r\n\r\n\t_selectCell (cell, rowIndex, colIndex) {\r\n\t\t//Clear old selection\r\n\t\tif (this._currentSelection && this._currentSelection !== cell) {\r\n\t\t\tthis._currentSelection.classList.remove(this._selectionClass);\r\n\t\t}\r\n\r\n\t\t//Set selection\r\n\t\tthis._currentSelection = cell;\r\n\t\tthis._currentSelection.classList.add(this._selectionClass);\r\n\t\tthis._grid.view.getElement().focus();\r\n\r\n\t\t//Store selection state\r\n\t\tlet selection = this._grid.state.get('selection');\r\n\t\tif (!selection) {\r\n\t\t\tselection = [];\r\n\t\t\tthis._grid.state.set('selection', selection);\r\n\t\t}\r\n\t\tselection.length = 0;\r\n\t\tselection.push({\r\n\t\t\tr: rowIndex,\r\n\t\t\tc: colIndex,\r\n\t\t\tw: 1,\r\n\t\t\th: 1\r\n\t\t});\r\n\r\n\t}\r\n\r\n}","export class EditorExtension {\r\n\r\n\tinit (grid, config) {\r\n\t\tthis._grid = grid;\r\n\t\tthis._config = config;\r\n\t\tthis._editorAttached = false;\r\n        this._scrollHandler = this._scrollHandler.bind(this);\r\n\t\tthis._grid.view.listen('vscroll', this._scrollHandler);\r\n\t\tthis._grid.view.listen('hscroll', this._scrollHandler);\r\n        this._cellDblClickedHandler = this._cellDblClickedHandler.bind(this);\r\n\t}\r\n\r\n\t_scrollHandler () {\r\n\t\tthis._detachEditor();\r\n\t}\r\n\r\n\tkeyDown (e) {\r\n\t\tif (!this._editorAttached) {\r\n\t\t\tif (!e.ctrlKey) {\r\n\t\t\t\tlet selection = this._grid.state.get('selection');\r\n\t\t\t\tif (selection && selection.length > 0) {\r\n\t\t\t\t\tlet rowIndex = selection[0].r;\r\n                    let colIndex = selection[0].c;\r\n                    if (rowIndex >= 0 && rowIndex < this._grid.model.getRowCount() &&\r\n                        colIndex >= 0 && colIndex < this._grid.model.getColumnCount()) {\r\n                        if (e.keyCode === 46) {\r\n                            let cell = this._grid.view.getCell(rowIndex, colIndex);\r\n                            if (cell) {\r\n                                this._clearCell(cell);\r\n                            }\r\n                        } else\r\n                        if (e.keyCode === 13 || (e.keyCode > 31 && !(e.keyCode >= 37 && e.keyCode <= 40))) {\r\n                            let cell = this._grid.view.getCell(rowIndex, colIndex);\r\n                            if (cell) {\r\n                                this._editCell(cell);\r\n                            }\r\n                        }\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n\t}\r\n\r\n\tcellAfterRender (e) {\r\n\t\te.cell.addEventListener('dblclick', this._cellDblClickedHandler);\r\n    }\r\n\r\n    cellAfterRecycled (e) {\r\n        e.cell.removeEventListener('dblclick', this._cellDblClickedHandler, false);\r\n    }\r\n\r\n    _cellDblClickedHandler (e) {\r\n        let actualCell = e.target;\r\n        if (actualCell) {\r\n            if (actualCell.classList.contains('pgrid-cell-content')) {\r\n                actualCell = actualCell.parentElement;\r\n            }\r\n            this._editCell(actualCell);\r\n        }\r\n    }\r\n\r\n    _clearCell (cell) {\r\n\t\tlet rowIndex = parseInt(cell.dataset.rowIndex);\r\n\t\tlet colIndex = parseInt(cell.dataset.colIndex);\r\n        if (this._grid.model.canEdit(rowIndex, colIndex)) {\r\n            this._editingRow = rowIndex;\r\n            this._editingCol = colIndex;\r\n\r\n            let customEditor = this._grid.model.getCascadedCellProp(rowIndex, colIndex, 'editor');\r\n            if (customEditor && customEditor.clear) {\r\n                let eventArg = {\r\n                    done: this._done.bind(this)\r\n                };\r\n                customEditor.clear(eventArg);\r\n            } else {\r\n                this._done(null);\r\n            }\r\n        }\r\n    }\r\n\r\n\t_editCell (cell) {\r\n\t\tlet actualCell = cell;\r\n\t\tlet actualRow = parseInt(actualCell.dataset.rowIndex);\r\n\t\tlet actualCol = parseInt(actualCell.dataset.colIndex);\r\n\t\tif (this._grid.model.canEdit(actualRow, actualCol)) {\r\n\r\n\t\t\t//If there's custom editor, use custom editor to attach the editor\r\n\t\t\tthis._grid.state.set('editing', true);\r\n\r\n\t\t\t//Create float editor container\r\n\t\t\tlet cellBound = cell.getBoundingClientRect();\r\n\t\t\tconst scrollingElement = document.scrollingElement || document.documentElement;\r\n\t\t\tlet scrollTop = scrollingElement.scrollTop;\r\n\t\t\tlet scrollLeft = scrollingElement.scrollLeft;\r\n\t\t\tthis._editorContainer = document.createElement('div');\r\n\t\t\tthis._editorContainer.style.position = 'absolute';\r\n\t\t\tthis._editorContainer.style.top = (cellBound.top + scrollTop) + 'px';\r\n\t\t\tthis._editorContainer.style.left = (cellBound.left + scrollLeft) + 'px';\r\n\t\t\tthis._editorContainer.style.width = cellBound.width + 'px';\r\n\t\t\tthis._editorContainer.style.height = cellBound.height + 'px';\r\n\t\t\tdocument.body.appendChild(this._editorContainer);\r\n\r\n            //Get edited data field\r\n            let data = this._grid.model.getDataAt(actualRow, actualCol);\r\n\r\n\t\t\t//Check if there's any custom editor\r\n\t\t\tlet customEditor = this._grid.model.getCascadedCellProp(actualCell.dataset.rowIndex, actualCell.dataset.colIndex, 'editor');\r\n\t\t\tif (customEditor && customEditor.attach) {\r\n                let dataRow = this._grid.model.getRowDataAt(actualRow, actualCol);\r\n                let eventArg = {\r\n                    cell: this._editorContainer,\r\n                    data: data,\r\n                    dataRow: dataRow,\r\n                    done: this._done.bind(this)\r\n                };\r\n\t\t\t\tcustomEditor.attach(eventArg);\r\n\t\t\t} else {\r\n\t\t\t\tthis._attachEditor(this._editorContainer, data, this._done.bind(this));\r\n\t\t\t}\r\n\r\n\t\t\tthis._editorAttached = true;\r\n\t\t\tthis._editingCol = actualCol;\r\n\t\t\tthis._editingRow = actualRow;\r\n\t\t}\r\n\t}\r\n\r\n\t_attachEditor (cell, data, done) {\r\n\t\tif (!this._inputElement) {\r\n\t\t\tlet cellBound = cell.getBoundingClientRect();\r\n\t\t\tthis._inputElement = document.createElement('input');\r\n\t\t\tthis._inputElement.type = 'text';\r\n\t\t\tthis._inputElement.value = data;\r\n\t\t\tthis._inputElement.style.width = (cellBound.width) + 'px';\r\n\t\t\tthis._inputElement.style.height = (cellBound.height) + 'px';\r\n\t\t\tthis._inputElement.className = 'pgrid-cell-text-editor';\r\n\r\n\t\t\tcell.appendChild(this._inputElement);\r\n\r\n\t\t\tthis._inputElement.focus();\r\n\t\t\tthis._inputElement.select();\r\n\r\n\t\t\tthis._arrowKeyLocked = false;\r\n\r\n\t\t\tthis._keydownHandler = (e) => {\r\n\t\t\t\tswitch (e.keyCode) {\r\n\t\t\t\t\tcase 9: //Tab\r\n\t\t\t\t\tcase 13: //Enter\r\n\t\t\t\t\t\t//Prevent double done() call\r\n\t\t\t\t\t\tif (this._inputElement) {\r\n\t\t\t\t\t\t\tthis._inputElement.removeEventListener('blur', this._blurHandler);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (e.keyCode === 9) {\r\n\t\t\t\t\t\t\tdone(e.target.value, undefined, true);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdone(e.target.value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 27: //ESC\r\n\t\t\t\t\t\t//Prevent double done() call\r\n\t\t\t\t\t\tif (this._inputElement) {\r\n\t\t\t\t\t\t\tthis._inputElement.removeEventListener('blur', this._blurHandler);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdone();\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 40: //Down\r\n\t\t\t\t\tcase 38: //Up\r\n\t\t\t\t\tcase 37: //Left\r\n\t\t\t\t\tcase 39: //Right\r\n                        const activeTag = document.activeElement.tagName;\r\n                        if (activeTag !== 'INPUT') {\r\n                            done(e.target.value);\r\n                        }\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tthis._blurHandler = (e) => {\r\n\t\t\t\tdone(e.target.value);\r\n\t\t\t};\r\n\r\n\t\t\tthis._inputElement.addEventListener('keydown', this._keydownHandler);\r\n\t\t\tthis._inputElement.addEventListener('blur', this._blurHandler);\r\n\t\t}\r\n\t}\r\n\r\n\t_detachEditor () {\r\n\t\tif (this._editorContainer && document.body === this._editorContainer.parentNode) {\r\n            document.body.removeChild(this._editorContainer);\r\n\t\t\tthis._editorContainer = null;\r\n\t\t\tif (this._inputElement) {\r\n\t\t\t\tthis._inputElement.removeEventListener('keydown', this._keydownHandler);\r\n\t\t\t\tthis._inputElement.removeEventListener('blur', this._blurHandler);\r\n\t\t\t\tthis._inputElement.removeEventListener('click', this._clickHandler);\r\n\t\t\t\tthis._inputElement.parentElement.removeChild(this._inputElement);\r\n\t\t\t\tthis._inputElement = null;\r\n\t\t\t\tthis._keydownHandler = null;\r\n\t\t\t\tthis._blurHandler = null;\r\n\t\t\t\tthis._clickHandler = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_done (result, multiFields, goNext) {\r\n\t\tthis._detachEditor();\r\n\t\tif (result !== undefined) {\r\n\t\t\tif (!multiFields) {\r\n\t\t\t\tthis._grid.model.setDataAt(this._editingRow, this._editingCol, result);\r\n\t\t\t} else {\r\n\t\t\t\tlet rowId = this._grid.model.getRowId(this._editingRow);\r\n\t\t\t\tif (rowId) {\r\n\t\t\t\t\tfor (let prop in result) {\r\n\t\t\t\t\t\tif (result.hasOwnProperty(prop)) {\r\n\t\t\t\t\t\t\tthis._grid.data.setData(rowId, prop, result[prop]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._grid.view.updateCell(this._editingRow, this._editingCol);\r\n\t\tthis._editorAttached = false;\r\n\t\tthis._grid.state.set('editing', false);\r\n\r\n\t\t//Re-focus at the grid\r\n\t\tthis._grid.view.getElement().focus();\r\n\r\n\t\tif (goNext) {\r\n\t\t\tconst selectionExtension = this._grid.extension.getExtension('DEFAULT_EXT_SELECTION');\r\n\t\t\tif (selectionExtension) {\r\n\t\t\t\tselectionExtension.selectCell(this._editingCol + 1, this._editingRow);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._editingRow = -1;\r\n\t\tthis._editingCol = -1;\r\n\t}\r\n\r\n}","export class CopyPasteExtension {\r\n\r\n    constructor() {\r\n        this._globalClipboard = false;\r\n    }\r\n\r\n\tinit (grid, config) {\r\n\t\tthis._grid = grid;\r\n        this._config = config;\r\n        this._srcSelection = null;\r\n\t}\r\n\r\n\tkeyDown (e) {\r\n        if (this._globalClipboard && e.ctrlKey) {\r\n            if (e.key === 'c') {\r\n                let data = this._copy();\r\n                if (data !== null) {\r\n                    window.clipboardData.setData('text', data);\r\n                }\r\n            } else\r\n            if (e.key === 'v') {\r\n                this._paste(window.clipboardData.getData('text'));\r\n            }\r\n        }\r\n    }\r\n\r\n    gridAfterRender(e) {\r\n        if (!window.clipboardData) {\r\n            this._grid.view.getElement().addEventListener('paste', (pasteEvent) => {\r\n                this._paste(pasteEvent.clipboardData.getData('text'));\r\n            });\r\n            this._grid.view.getElement().addEventListener('copy', (copyEvent) => {\r\n                let data = this._copy();\r\n                if (data !== null) {\r\n                    copyEvent.clipboardData.setData('text/plain', data);\r\n                    copyEvent.preventDefault();\r\n                }\r\n            });\r\n            this._globalClipboard = false;\r\n        } else {\r\n            this._globalClipboard = true;\r\n        }\r\n    }\r\n\r\n    _copy(clipboardData) {\r\n        let selection = this._grid.state.get('selection');\r\n        if (selection && selection.length > 0) {\r\n            let s = selection[0];\r\n            let rows = [];\r\n            for (let i=0; i<s.h; i++) {\r\n                let cols = [];\r\n                for (let j=0; j<s.w; j++) {\r\n                    cols.push(this._grid.model.getDataAt(s.r + i, s.c + j));\r\n                }\r\n                rows.push(cols.join('\\t'));\r\n            }\r\n            this._srcSelection = s;\r\n            return rows.join('\\n');\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    _paste(data) {\r\n        if (data) {\r\n            data = data.replace(/\\n$/g, '');\r\n            let selection = this._grid.state.get('selection');\r\n            if (selection && selection.length > 0) {\r\n                let s = selection[0];\r\n                let rows = data.split('\\n');\r\n                for (let i=0; i<rows.length; i++) {\r\n                    let cols = rows[i].split('\\t');\r\n                    for (let j=0; j<cols.length; j++) {\r\n                        let pasteRow =  s.r + i;\r\n                        let pasteCol = s.c + j;\r\n                        if (this._grid.model.canEdit(pasteRow, pasteCol)) {\r\n                            this._grid.model.setDataAt(pasteRow, pasteCol, cols[j]);\r\n                            this._grid.view.updateCell(pasteRow, pasteCol);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let srcRowId = -1;\r\n                let srcField = null;\r\n                if (this._srcSelection) {\r\n                    srcRowId = this._grid.model.getRowId(this._srcSelection.r);\r\n                    srcField = this._grid.model.getColumnField(this._srcSelection.c);\r\n                }\r\n                this._grid.dispatch('cellPasted', {\r\n                    srcRowId: srcRowId,\r\n                    srcField: srcField,\r\n                    srcSelection: this._srcSelection,\r\n                    destRowId: this._grid.model.getRowId(s.r),\r\n                    destField: this._grid.model.getColumnField(s.c),\r\n                    destSelection: s,\r\n                    data: data\r\n                });\r\n                this._srcSelection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n}","export class ViewUpdaterExtension {\r\n\r\n    init (grid, config) {\r\n\t\tthis._grid = grid;\r\n\t\tthis._config = config;\r\n\t}\r\n\r\n    dataFinishUpdate (e) {\r\n        let rowIndexCache = {};\r\n        let colIndexCache = {};\r\n        for (let i=0; i<e.updates.length; i++) {\r\n            let {rowId, field} = e.updates[i];\r\n            let rowIndex = null;\r\n            let colIndex = null;\r\n            if (rowIndexCache[rowId]) {\r\n                rowIndex = rowIndexCache[rowId];\r\n            } else {\r\n                rowIndex = this._grid.model.getRowIndex(rowId);\r\n                rowIndexCache[rowId] = rowIndex;\r\n            }\r\n            if (colIndexCache[field]) {\r\n                colIndex = colIndexCache[field];\r\n            } else {\r\n                colIndex = this._grid.model.getColumnIndex(field);\r\n                colIndexCache[rowId] = colIndex;\r\n            }\r\n            if (colIndex !== -1) {\r\n                this._grid.view.updateCell(rowIndex, colIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n}","export class FormatterExtension {\r\n\r\n    init (grid, config) {\r\n\t\tthis._grid = grid;\r\n\t\tthis._config = config;\r\n    }\r\n\r\n    render (e, model, formatter) {\r\n        if (formatter.render) {\r\n            let newEvent = Object.assign({}, e);\r\n            newEvent.colModel = model;\r\n            newEvent.grid = this._grid;\r\n            formatter.render(newEvent);\r\n            e.handled = true;\r\n        }\r\n    }\r\n\r\n    update (e, model, formatter) {\r\n        let newEvent = Object.assign({}, e);\r\n        newEvent.colModel = model;\r\n        newEvent.grid = this._grid;\r\n        if (formatter.update) {\r\n            formatter.update(newEvent);\r\n            e.handled = true;\r\n        } else\r\n        if (formatter.render) {\r\n            formatter.render(newEvent);\r\n            e.handled = true;\r\n        }\r\n    }\r\n\r\n    cellRender (e) {\r\n        const model = this._grid.model.getColumnModel(e.colIndex);\r\n        if (model && model.formatter) {\r\n            if (Array.isArray(model.formatter)) {\r\n                for (let i=0; i<model.formatter.length; i++) {\r\n                    this.render(e, model, model.formatter[i]);\r\n                }\r\n            } else {\r\n                this.render(e, model, model.formatter);\r\n            }\r\n        }\r\n    }\r\n\r\n    cellUpdate (e) {\r\n        const model = this._grid.model.getColumnModel(e.colIndex);\r\n        if (model && model.formatter) {\r\n            if (Array.isArray(model.formatter)) {\r\n                for (let i=0; i<model.formatter.length; i++) {\r\n                    this.update(e, model, model.formatter[i]);\r\n                }\r\n            } else {\r\n                this.update(e, model, model.formatter);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { PGrid } from './grid/grid';\r\n\r\nwindow.PGrid = PGrid;\r\n\r\n// Polyfill - Element.scrollIntoViewIfNeeded\r\n\r\nif (!Element.prototype.scrollIntoViewIfNeeded) {\r\n    Element.prototype.scrollIntoViewIfNeeded = function (centerIfNeeded) {\r\n        \"use strict\";\r\n\r\n        function makeRange(start, length) {\r\n            return {\"start\": start, \"length\": length, \"end\": start + length};\r\n        }\r\n\r\n        function coverRange(inner, outer) {\r\n            if (\r\n                false === centerIfNeeded ||\r\n                (outer.start < inner.end && inner.start < outer.end)\r\n            ) {\r\n                return Math.max(\r\n                    inner.end - outer.length,\r\n                    Math.min(outer.start, inner.start)\r\n                );\r\n            }\r\n            return (inner.start + inner.end - outer.length) / 2;\r\n        }\r\n\r\n        function makePoint(x, y) {\r\n            return {\r\n                \"x\": x,\r\n                \"y\": y,\r\n                \"translate\": function translate(dX, dY) {\r\n                    return makePoint(x + dX, y + dY);\r\n                }\r\n            };\r\n        }\r\n\r\n        function absolute(elem, pt) {\r\n            while (elem) {\r\n                pt = pt.translate(elem.offsetLeft, elem.offsetTop);\r\n                elem = elem.offsetParent;\r\n            }\r\n            return pt;\r\n        }\r\n\r\n        var target = absolute(this, makePoint(0, 0)),\r\n            extent = makePoint(this.offsetWidth, this.offsetHeight),\r\n            elem = this.parentNode,\r\n            origin;\r\n\r\n        while (elem instanceof HTMLElement) {\r\n            // Apply desired scroll amount.\r\n            origin = absolute(elem, makePoint(elem.clientLeft, elem.clientTop));\r\n            elem.scrollLeft = coverRange(\r\n                makeRange(target.x - origin.x, extent.x),\r\n                makeRange(elem.scrollLeft, elem.clientWidth)\r\n            );\r\n            elem.scrollTop = coverRange(\r\n                makeRange(target.y - origin.y, extent.y),\r\n                makeRange(elem.scrollTop, elem.clientHeight)\r\n            );\r\n\r\n            // Determine actual scroll amount by reading back scroll properties.\r\n            target = target.translate(-elem.scrollLeft, -elem.scrollTop);\r\n            elem = elem.parentNode;\r\n        }\r\n    };\r\n}","import { View } from './view';\r\nimport { Model } from './model';\r\nimport { DataTable } from '../data/table';\r\nimport { Extension } from './extension';\r\nimport { State } from './state';\r\nimport { EventDispatcher } from './event';\r\nimport { Utils } from './utils';\r\n\r\nimport { SelectionExtension } from '../extensions/selection';\r\nimport { EditorExtension } from '../extensions/editor';\r\nimport { CopyPasteExtension } from '../extensions/copypaste';\r\nimport { ViewUpdaterExtension } from '../extensions/view-updater';\r\nimport { FormatterExtension } from '../extensions/formatter';\r\n\r\nexport class PGrid extends EventDispatcher {\r\n\r\n\tconstructor(config) {\r\n\t\tsuper();\r\n\r\n\t\t//Merge config with default config\r\n\t\tlet defaultConfig = {\r\n\t\t\trowCount: 0,\r\n\t\t\theaderRowCount: 1,\r\n\t\t\tfooterRowCount: 0,\r\n\t\t\tcolumnCount: 0,\r\n\t\t\trowHeight: 32,\r\n\t\t\tcolumnWidth: 100\r\n\t\t};\r\n\t\tthis._config = Utils.mixin(config, defaultConfig);\r\n\r\n\t\t//Extensions Store\r\n\t\tthis._extensions = new Extension(this, this._config);\r\n\r\n\t\tthis._data = new DataTable(this._config.dataModel, this._extensions);\r\n\t\tthis._model = new Model(this._config, this._data, this._extensions);\r\n\t\tthis._view = new View(this._model, this._extensions);\r\n\t\tthis._state = new State();\r\n\r\n\t\t//Load default extensions\r\n\t\tif (this._config.selection) {\r\n\t\t\tthis._extensions.loadExtension(new SelectionExtension(), 'DEFAULT_EXT_SELECTION');\r\n\t\t}\r\n\t\tif (this._config.editing) {\r\n\t\t\tthis._extensions.loadExtension(new EditorExtension(), 'DEFAULT_EXT_EDITOR');\r\n\t\t}\r\n\t\tif (this._config.copypaste) {\r\n\t\t\tthis._extensions.loadExtension(new CopyPasteExtension(), 'DEFAULT_EXT_COPYPASTE');\r\n\t\t}\r\n\t\tif (this._config.autoUpdate) {\r\n\t\t\tthis._extensions.loadExtension(new ViewUpdaterExtension(), 'DEFAULT_EXT_VIEW_UPDATER');\r\n\t\t}\r\n\t\tif (this._config.columnFormatter) {\r\n\t\t\tthis._extensions.loadExtension(new FormatterExtension(), 'DEFAULT_EXT_FORMATTER');\r\n\t\t}\r\n\r\n\t\t//Load initial external extensions\r\n\t\tif (this._config.extensions && this._config.extensions.length > 0) {\r\n\t\t\tthis._config.extensions.forEach((ext) => {\r\n\t\t\t\tthis._extensions.loadExtension(ext);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tget view() {\r\n\t\treturn this._view;\r\n\t}\r\n\r\n\tget model() {\r\n\t\treturn this._model;\r\n\t}\r\n\r\n\tget data() {\r\n\t\treturn this._data;\r\n\t}\r\n\r\n\tget extension() {\r\n\t\treturn this._extensions;\r\n\t}\r\n\r\n\tget state () {\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\trender(element) {\r\n\t\tthis._view.render(element);\r\n\t}\r\n\r\n}"],"sourceRoot":""}